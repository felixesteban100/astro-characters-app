---
import "../styles/globals.css";
import { ViewTransitions, slide, fade } from "astro:transitions";
import LoaderAstro from "src/components/LoaderAstro.astro";
import Navbar from "src/components/Navbar.astro";
import Sparkles from "src/components/Sparkles.svelte";

// things to fix:
/* 
  - FEATURES
    - make each character_class to have a different color depending on the number range

    - make each power tier to have a certain color depending on the number range
  
    - when added to the character colleciton use the superhero_class in the character card

    - make the viewTransition API to not scrool on top before changing page?
    
    - add icons for each field in the appereance tan and biography tab (/character page)
    
    - add a new page called objects where you display the documents from the objects collection
    
    - add page for places where you display the documents from the places collection

    - (I added one but I can't do zoom) add a library to see each image in the charactersImageDisplay.svelte component in fullscreen  
      [https://www.npmjs.com/package/bigger-picture#options]
      [https://madewithsvelte.com/bigger-picture]
      maybe this one can work

    - some images are not displaying (because are from a CORS site i guess or webp files) :/

    - dark mode toggling when changes page while using viewTransition (in the mean time I have just dark mode by default)

    - configure the swap page transition so that they slide in the same order they are in the navbar
----------------------------------------------------
  POPULATE ALL THE ADDED PROPERTIES  

  - NEW PROPERTIES FOR CHARACTERS
    description (long string), 
    weaknesses (array of strings), 
    origin (long string), 
    enemies (array of characters ids)  
    logo[if i can find where to get all the logos of all the characters first] (url of the image store on the web and took it from marveldatabase/), 
    tier (ask chatgpt to rank them from 1 to 10), 
    character_class (it is calculated by ( INTELLIGENCE^1.3 + (STRENGTH*0.5 )^2 + (SPEED*0.5)^2 + DURABILITY^1.6 + (POWER + (SUPERPOWERS_SCORES*SPL))^2 + COMBAT^1.8 ) ^ TIER) 

    code used: 
    {
      $set: {
        'appearance.description': "",
        'weaknesses': [],
        'biography.origin': '',
        'connections.enemies': [],
        'logo': '',
        'tier': 0,
        'character_class': 0
      },
    }

  - NEW PROPERTIES FOR TEAMS
      leaders (as an array to each team { name, id }[])

  - NEW PROPERTIES FOR POWERS
      description
      score (ask chatgpt for a number from 1 to 100,000)
      tier (ask chatgpt for a number from 1 to 10)

----------------------------------------------------
  - NEW COLLECTION PLACES:
      name 
      description 
      universe
      characters 
      images 
      location

  - NEW COLLECTION OBJECTS:
      name, 
      description, 
      universe, 
  
      I could use this ones to begging: 
      https://comicvine.gamespot.com/profile/van_cere/lists/dc-objects-items-and-artifacts/51733/
      https://www.cbr.com/marvel-powerful-weapons-fans-forgot-existed/
  
*/

const currentPath = Astro.url.pathname;
interface Props {
  title?: string;
  otherLinks?: {
    href: string;
    title: string;
  }[];
  animateFade?: boolean;
}

const { title, otherLinks, animateFade } = Astro.props;

const links = [
  {
    href: "/characters",
    title: "Characters",
  },
  // {
  //   href: "/team-fight",
  //   title: "some vs some",
  // },
  {
    href: "/universes",
    title: "Universes",
  },
  {
    href: "/teams",
    title: "Teams",
  },
  {
    href: "/powers",
    title: "Powers",
  },
  {
    href: "/random_characters",
    title: "Random Characters",
  },
  {
    href: "/compare",
    title: "Compare",
  },
];

if (otherLinks) links.push(...otherLinks);

// const anim = {
//   old: {
//     name: "fadeIn",
//     duration: "0.2s",
//     easing: "linear",
//     fillMode: "forwards",
//   },
//   new: {
//     name: "fadeOut",
//     duration: "0.3s",
//     easing: "linear",
//     fillMode: "backwards",
//   },
// };

// const this_animation_does_nothing_because_it_is_being_customized_in_css_using_classes =
//   {
//     forwards: anim,
//     backwards: anim,
//   };
---

<!-- <script>
  let lastClick;
  addEventListener("click", (event) => (lastClick = event));

  console.log("lastClick", lastClick);
</script> -->
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback="swap" />
    <!-- <ViewTransitions /> -->
    <script src="../scripts/transitions.ts"></script>
  </head>
  <body>
    <div class="absolute inset-0 -z-10 min-h-screen" transition:persist>
      <Sparkles client:only />
    </div>

    <main class="w-[90vw] md:w-[80vw] mx-auto overflow-hidden max-w-[1700px]">
      <Navbar title={title ?? ""} currentPath={currentPath} links={links} />
      <div
        class={`mx-auto mb-10 ${title !== "Welcome to Characters." ? "lg:mt-10" : "mt-5"} ${currentPath.includes("/compare") && "flex flex-col items-center"}`}
      >
        <div
          class="flex justify-between items-center w-full mb-5"
          transition:animate="none"
          transition:name={`title-animation`}
        >
          <p class="font-bold text-3xl">{title}</p>
          <div>
            <div id="actionDoer">
              <slot name="page_title_other_content" />
            </div>
            <LoaderAstro />
          </div>
        </div>
        <div
          transition:animate={animateFade
            ? fade({ duration: "1s" })
            : slide({ duration: "1s" })}
          transition:name={`page-animation`}
        >
          <slot name="content" />
        </div>
      </div>
    </main>
  </body><!-- transition:animate={currentPath.includes("/compare") /* ||
          currentPath.includes("/random_characters") */
            ? fade({ duration: "1s" })
            : slide({ duration: "1s" })}--><!-- transition:animate={animateFade === true
            ? fade({ duration: "1s" })
            : slide({ duration: "1s" })} -->
</html>
