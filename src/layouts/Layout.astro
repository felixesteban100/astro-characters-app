---
import "../styles/globals.css";
import { ViewTransitions, slide, fade } from "astro:transitions";
import LoaderAstro from "src/components/LoaderAstro.astro";
import Navbar from "src/components/Navbar.astro";
import Sparkles from "src/components/Sparkles.svelte";

// things to fix:
/* 
-- add objects collection with the following propertyes: name, description, universe, carriers (charactersIds) so that we can aggergate the characters using a $lookup later, the same with powers (array of powers values)
  - use chatGPT to populate the objects collection
  I could use this ones: 
  https://comicvine.gamespot.com/profile/van_cere/lists/dc-objects-items-and-artifacts/51733/
  https://www.cbr.com/marvel-powerful-weapons-fans-forgot-existed/
-- add a new page called objects where you display the documents from the objects collection

-- do the exact same but with places: 
  - create collection
  - create page
properties: name, description, universe, characters, images, location



- (I added one but I can't do zoom) add a library to see each image in the charactersImageDisplay.svelte component in fullscreen  
- some images are not displaying (because are from a CORS site i guess or webp files) :/
- dark mode toggling when changes page while using viewTransition (in the mean time I have just dark mode by default)
-- add description, weaknesses, and origin property to each character 
-- add leaders property as an array to each team { name, id }[]
- configure the swap page transition so that they slide in the same order they are in the navbar
*/

const currentPath = Astro.url.pathname;

interface Props {
  title?: string;
  otherLinks?: {
    href: string;
    title: string;
  }[];
  animateFade?: boolean;
}

const { title, otherLinks, animateFade } = Astro.props;

const links = [
  {
    href: "/characters",
    title: "Characters",
  },
  {
    href: "/random_characters",
    title: "Random Characters",
  },
  {
    href: "/compare",
    title: "Compare",
  },
  // {
  //   href: "/team-fight",
  //   title: "some vs some",
  // },
  {
    href: "/universes",
    title: "Universes",
  },
  {
    href: "/teams",
    title: "Teams",
  },
  {
    href: "/powers",
    title: "Powers",
  },
];

if (otherLinks) links.push(...otherLinks);

// const anim = {
//   old: {
//     name: "fadeIn",
//     duration: "0.2s",
//     easing: "linear",
//     fillMode: "forwards",
//   },
//   new: {
//     name: "fadeOut",
//     duration: "0.3s",
//     easing: "linear",
//     fillMode: "backwards",
//   },
// };

// const this_animation_does_nothing_because_it_is_being_customized_in_css_using_classes =
//   {
//     forwards: anim,
//     backwards: anim,
//   };
---

<!-- <script>
  let lastClick;
  addEventListener("click", (event) => (lastClick = event));

  console.log("lastClick", lastClick);
</script> -->
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback="swap" />
    <!-- <ViewTransitions /> -->
    <script src="../scripts/transitions.ts"></script>
  </head>
  <body>
    <div class="absolute inset-0 -z-10 min-h-screen" transition:persist>
      <Sparkles client:only />
    </div>

    <main class="w-[90vw] md:w-[80vw] mx-auto overflow-hidden max-w-[1700px]">
      <Navbar title={title ?? ""} currentPath={currentPath} links={links} />
      <div
        class={`mx-auto mb-10 ${title !== "Welcome to Characters." ? "lg:mt-10" : "mt-5"} ${currentPath.includes("/compare") && "flex flex-col items-center"}`}
      >
        <div
          class="flex justify-between items-center w-full mb-5"
          transition:animate="none"
          transition:name={`title-animation`}
        >
          <p class="font-bold text-3xl">{title}</p>
          <div>
            <div id="actionDoer">
              <slot name="page_title_other_content" />
            </div>
            <LoaderAstro />
          </div>
        </div>
        <div
          transition:animate={animateFade
            ? fade({ duration: "1s" })
            : slide({ duration: "1s" })}
          transition:name={`page-animation`}
        >
          <slot name="content" />
        </div>
      </div>
    </main>
  </body><!-- transition:animate={currentPath.includes("/compare") /* ||
          currentPath.includes("/random_characters") */
            ? fade({ duration: "1s" })
            : slide({ duration: "1s" })}-->
</html>
