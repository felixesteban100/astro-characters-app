---
import { CHARACTERS_PER_PAGE } from "$lib/constants/constants";
import Pagination from "src/components/Pagination.svelte";
import { collectionUniverses } from "../lib/mongodb";
import Layout from "src/layouts/Layout.astro";
import UniverseCard from "src/components/universe_page/UniverseCard.astro";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";

const offset = (parseInt(currentPage) - 1) * CHARACTERS_PER_PAGE;

const aggregationOptions = [
  {
    $lookup: {
      from: "teams",
      localField: "id",
      foreignField: "universe",
      pipeline: [
        {
          $project: {
            members: 0,
            universe: 0,
            comics: 0,
          },
        },
      ],
      as: "teams",
    },
  },
  { $match: {} },
];

const universesJoinTeamsLenght = await collectionUniverses
  .aggregate<UniverseWithJoinTeams>(aggregationOptions)
  .toArray();

const universesJoinTeams = await collectionUniverses
  .aggregate<UniverseWithJoinTeams>([
    ...aggregationOptions,
    { $sort: { [`id`]: 1 } },
    { $skip: offset },
    { $limit: CHARACTERS_PER_PAGE },
  ])
  .toArray();
---

<Layout title="Universes">
  <div class="flex flex-col items-center justify-center" slot="content">
    <div
      class="w-full grid 2xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-[10rem] my-11 justify-center items-center"
    >
      {
        universesJoinTeams.map((universe) => {
          return <UniverseCard {universe} />;
        })
      }
    </div>

    <Pagination
      currentPage={currentPage}
      url={`/universes?currentPage=`}
      countItems={universesJoinTeamsLenght.length}
      howManyPerPage={CHARACTERS_PER_PAGE}
      client:only
    />
  </div>
</Layout>
