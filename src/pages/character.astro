---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionTeams,
} from "../lib/mongodb";
import Tabs from "src/components/Tabs.svelte";
import { joinTeam_universe_power_toCharacter } from "$lib/charactersUtils";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";
import { ObjectId } from "mongodb";
import TeamCard from "src/components/team_page/TeamCard.astro";
import { getTeamAggregationOptions } from "$lib/constants/aggregations";
import PowerCard from "src/components/powers_page/PowerCard.astro";

const id = Astro.url.searchParams.get("id");
const [selectedCharacter] = await collectionCharacters
  .aggregate<CharacterWithJoinTeamUniversePower>(
    joinTeam_universe_power_toCharacter(
      { id: parseInt(id ?? "") },
      "id",
      "desc",
      0,
      1,
      [],
    ),
  )
  .toArray();

const teamAggregationOptions = getTeamAggregationOptions(undefined);

const [teamsJoinUniverse] = await Promise.all([
  collectionTeams
    .aggregate<TeamWithJoinCharacterUniverse>([
      ...teamAggregationOptions,
      {
        $match: {
          name: {
            $in: selectedCharacter.connections.groupAffiliation.map(
              (c) => c.value,
            ),
          },
        },
      },
      { $unwind: "$universe" },
      { $sort: { [`_id`]: -1 } },
    ])
    .toArray(),
]);

if (!selectedCharacter) {
  return Astro.redirect(`/not-found`);
}
---

<Layout
  title={`${selectedCharacter?.name}`}
  otherLinks={[
    {
      href: `/compare?first=${selectedCharacter?.id}`,
      title: `Compare using ${selectedCharacter?.name}`,
    },
  ]}
>
  <div
    class="flex flex-col xl:flex-row justify-center items-center gap-16 w-full"
    slot="content"
  >
    <div class="flex flex-col justify-center items-start gap-5">
      <CharacterCard
        imageSizes={"h-[40rem] w-[40rem]"}
        c={selectedCharacter}
        showName={false}
        withTransitionName={true}
        withLink={false}
        otherClasses=""
      />
    </div>
    <div class="h-[44rem] w-full lg:w-[70%]">
      <Tabs
        characterInfo={selectedCharacter}
        publisherInfo={selectedCharacter.biography.publisher}
        teams={selectedCharacter.connections.groupAffiliation}
        character_added_by={new ObjectId(selectedCharacter._id).getTimestamp()}
        client:load
      >
        <div slot="teamsRenderedElements">
          {
            teamsJoinUniverse.map((c) => {
              return (
                <a
                  href={`/characters?universe=${selectedCharacter.biography.publisher.value}&team=${c.value}`}
                >
                  <TeamCard team={c} unableLink />
                </a>
              );
            })
          }
        </div>
        <div
          slot="powersRenderedElements"
          class="flex flex-col gap-2 justify-center items-center mt-10"
        >
          {
            selectedCharacter.powers.map((c) => {
              return <PowerCard power={c} />;
            })
          }
        </div>
      </Tabs>
    </div>
  </div>
</Layout>
