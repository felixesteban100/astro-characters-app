---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionUniverses,
} from "../lib/mongodb";

import {
  getQueryOptions,
  joinTeam_universe_power_toCharacter,
} from "../lib/charactersUtils";
import { getRandomIdsRecursively } from "../lib/charactersUtils";
import { Button } from "$lib/components/ui/button";
import { Lock, Shuffle, ArrowUpDown, GitCompareArrows } from "lucide-astro";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";
import ChangeHowManyInput from "src/components/random_characters/ChangeHowManyInput.svelte";
import { LockKeyholeOpen, Filter } from "lucide-svelte";
import FilterCharactersRandom from "src/components/FilterCharactersRandom.svelte";
import { emptyCharacter } from "$lib/constants/constants";

const all = Astro.url.searchParams.get("all");
const howMany = parseInt(Astro.url.searchParams.get("howMany") ?? "4");
const locked = Astro.url.searchParams.get("locked");

const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
// const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const power = Astro.url.searchParams.get("power") ?? "All";

let allArray = all ? all.split("-") : [];
let lockedArray = locked ? locked.split("-") : [];

// const valuesFilterParams = `&gender=${gender}&side=${side}&race=${race}&power=${power}&universe=${universe}&team=${team}`;
const valuesFilterParams = `&gender=${gender}&side=${side}&race=${race}&power=${power}&universe=${universe}`;

// console.log(valuesFilterParams);

const valuesFilter = {
  side,
  universe,
  // team,
  gender,
  race,
  power,
};

const queryOptions: QueryOptions = getQueryOptions({
  ...valuesFilter,
  team: null,
  characterName: "",
  nameField: "",
  includesOrExact: false,
});

if (all && allArray.includes("0")) {
  const randoms = await getRandomIdsRecursively(
    queryOptions,
    allArray.filter((c) => c === "0").length,
  );

  allArray = allArray.map((c: string, index: number) => {
    if (c === "0") {
      const other = randoms.shift()!;
      return other;
    }
    return c;
  });
}

let allGenerated: number[] =
  allArray.length > 0 ? allArray.map((c) => parseInt(c)) : [];

let lockedIndexes: number[] =
  lockedArray.length > 0 ? lockedArray.map((c) => parseInt(c)) : [];

if (allGenerated.length === 0) {
  // for (let i = 0; i < howMany; i++) {
  //   const element = await getRandomIdRecursively(queryOptions);
  //   allGenerated.push(parseInt(element));
  // }
  const randoms = await getRandomIdsRecursively(queryOptions, howMany);

  randoms.forEach((c) => {
    allGenerated.push(parseInt(c));
  });
} else {
  if (allGenerated.length < howMany) {
    const howManyAreLeft = howMany - allGenerated.length;

    // for (let index = 0; index < howManyAreLeft; index++) {
    //   allGenerated.push(parseInt(await getRandomIdRecursively(queryOptions)));
    // }

    const randoms = await getRandomIdsRecursively(queryOptions, howManyAreLeft);

    randoms.forEach((c) => {
      allGenerated.push(parseInt(c));
    });

    return Astro.redirect(
      `/random_characters?all=${`${allGenerated.join("-")}`}&howMany=${howMany}${lockedIndexes.length > 0 ? `&locked=${lockedIndexes.join("-")}` : ""}${valuesFilterParams}`,
    );
  }

  if (allGenerated.length > howMany) {
    return Astro.redirect(
      `/random_characters?all=${`${[...allGenerated].splice(0, howMany).join("-")}`}&howMany=${howMany}${lockedIndexes.length > 0 ? `&locked=${lockedIndexes.join("-")}` : ""}${valuesFilterParams}`,
    );
  }
}

if (!all || all === "null" || all.includes("0")) {
  return Astro.redirect(
    `/random_characters?all=${`${allGenerated.join("-")}`}&howMany=${howMany}${lockedIndexes.length > 0 ? `&locked=${lockedIndexes.join("-")}` : ""}${valuesFilterParams}`,
  );
}

const [selectedCharacters, universesWithTeams, allUniverses, allPowers] =
  await Promise.all([
    collectionCharacters
      .aggregate<CharacterWithJoinTeamUniversePower>(
        joinTeam_universe_power_toCharacter(
          {
            id: {
              /* make mongodb query even if there are repeated ids in allGenerated  the same document several times*/
              $in: allGenerated,
            },
          },
          "id",
          "desc",
          0,
          howMany,
          [],
        ),
      )
      .toArray(),
    collectionUniverses
      .aggregate<UniverseWithJoinTeams>([
        {
          $lookup: {
            from: "teams",
            localField: "id",
            foreignField: "universe",
            pipeline: [
              {
                $project: {
                  universe: 0,
                  comics: 0,
                },
              },
              { $sort: { name: 1 } },
            ],
            as: "teams",
          },
        },
        { $match: { teams: { $exists: true, $not: { $size: 0 } } } },
      ])
      .toArray(),
    collectionUniverses.find({}).sort({ id: 1 }).toArray(),
    collectionPowers.find({}).sort({ name: 1 }).toArray(),
  ]);

// function updateArrayExceptOne(indexToKeep: number) {
//   return allGenerated.map((item, index) => {
//     // If the current index is the one we want to keep, return the original value
//     if (index === indexToKeep || lockedIndexes.includes(index)) {
//       return item;
//     }
//     // Otherwise, return the new value
//     return "undefined";
//   });
// }

function updateOneExceptArray(indexToKeep: number) {
  return allGenerated.map((item, index) => {
    // If the current index is the one we want to keep, return the original value
    if (index === indexToKeep) {
      return "0";
    }
    // Otherwise, return the new value
    return item;
  });
}

function swapItems(
  arr: number[],
  /* arr2: number[], (lockedIndexes) */ index1: number,
  index2: number,
) {
  // Ensure indices are valid
  if (
    index1 < 0 ||
    index1 >= allGenerated.length ||
    index2 < 0 ||
    index2 >= allGenerated.length
  ) {
    throw new Error("Invalid indices");
  }

  // Swap the elements by interchanging their positions in the global array
  const temp = arr[index1];
  arr[index1] = arr[index2];
  arr[index2] = temp;

  // Return the modified global array
  return arr;
}

function lockOrUnlockedIndex(arr: number[], index: number) {
  const indexPosition = arr.indexOf(index);

  if (indexPosition === -1) {
    // Add index if not found
    arr.push(index);
  } else {
    // Remove index if found
    arr.splice(indexPosition, 1);
  }

  return arr;
}

function makeNoneLockedIndexesUndefined() {
  return allGenerated.map((item, index) => {
    if (!lockedIndexes.includes(index)) {
      return "0";
    }
    return item;
  });
}

function organizeByIds(
  selectedCharacters: CharacterWithJoinTeamUniversePower[],
  ids: number[],
): CharacterWithJoinTeamUniversePower[] {
  const characterMap = new Map<number, CharacterWithJoinTeamUniversePower>();

  // Map items by their id
  selectedCharacters.forEach((character) => {
    characterMap.set(character.id, character);
  });

  // Create a new array with items sorted according to the ids array
  /* return  */ ids.map((id, index) => {
    if (isNaN(id)) {
      // return emptyCharacter; // Insert empty object for NaN
      selectedCharacters.push({ ...emptyCharacter, id: index }); // ðŸ’«
    }
    // return characterMap.get(id) || emptyCharacter; // Fallback to empty object if no match is found
  });

  return selectedCharacters; // ðŸ’«
}

function changeNaNforO(allGenerated: number[]) {
  return allGenerated.map((c, index) => {
    if (isNaN(c)) return index;
    return c;
  });
}

const charactersToDisplay =
  allGenerated.length !== selectedCharacters.length
    ? organizeByIds(selectedCharacters, allGenerated)
    : selectedCharacters;
---

<Layout title={`Random Characters`}>
  <div slot="page_title_other_content" class="flex gap-2">
    <ChangeHowManyInput
      {howMany}
      all={[...allGenerated]}
      locked={lockedIndexes}
      valuesFilterParams={valuesFilterParams}
      client:load
    />

    <a
      href={lockedIndexes.length === howMany
        ? null
        : `/random_characters?all=${makeNoneLockedIndexesUndefined().join("-")}&howMany=${howMany}&locked=${lockedIndexes.join("-")}${valuesFilterParams}`}
    >
      <Button
        class={`${lockedIndexes.length === howMany ? "opacity-45" : ""} h-[4rem] w-[4rem] `}
        variant="ghost"
        size="icon"
      >
        <Shuffle class="h-[2.5rem] w-[2.5rem]" />
      </Button>
    </a>

    {
      lockedIndexes.length === 0 ? (
        <a
          href={`/random_characters?all=${allGenerated.join("-")}&howMany=${howMany}&locked=${Array.from({ length: howMany }, (_, index) => index).join("-")}${valuesFilterParams}`}
        >
          <Button variant="ghost" size="icon" class="h-[4rem] w-[4rem] ">
            <Lock class="h-[2.5rem] w-[2.5rem]" />
          </Button>
        </a>
      ) : (
        <a
          href={`/random_characters?all=${allGenerated.join("-")}&howMany=${howMany}&locked=${[].join("-")}${valuesFilterParams}`}
        >
          <Button variant="ghost" size="icon" class="h-[4rem] w-[4rem] ">
            <LockKeyholeOpen class="h-[2.5rem] w-[2.5rem]" />
          </Button>
        </a>
      )
    }
    <!-- team={team} -->
    <FilterCharactersRandom
      href={`/random_characters?all=${makeNoneLockedIndexesUndefined().join("-")}&howMany=${howMany}&locked=${lockedIndexes.join("-")}`}
      gender={gender}
      side={side}
      race={race}
      power={power}
      universe={universe}
      universesWithTeams={universesWithTeams}
      allUniverses={allUniverses}
      allPowers={allPowers}
      client:load
    >
      <div class="flex gap-5" slot="trigger">
        <Filter class="h-[2.5rem] w-[2.5rem]" />
        <!-- <span class="text-primary hidden lg:flex text-3xl">|</span>
        <span class="text-primary hidden lg:flex text-3xl">(Press T)</span> -->
      </div>
    </FilterCharactersRandom>
  </div>

  <main
    class="mb-32 flex flex-col justify-center items-center gap-5"
    slot="content"
  >
    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10 w-full`}
    >
      {
        charactersToDisplay
          .sort(
            (a, b) =>
              changeNaNforO(allGenerated).indexOf(a.id) -
              changeNaNforO(allGenerated).indexOf(b.id),
          )
          .map(
            (
              c: CharacterWithJoinTeamUniversePower,
              index_allGenerated: number,
            ) => {
              return (
                <div class="flex flex-col gap-5 justify-center ">
                  <CharacterCard
                    c={c}
                    withTransitionName={true}
                    withLink={true}
                    otherClasses="w-full h-full flex justify-center character-image"
                  />

                  {/* <a
                    href={
                      lockedIndexes.length === howMany
                        ? null
                        : `/random_characters?all=${updateArrayExceptOne(index_allGenerated).join("-")}&howMany=${howMany}&locked=${lockedIndexes.join("-")}`
                    }
                    class={
                      lockedIndexes.length === howMany
                        ? "opacity-45"
                        : "hover:underline"
                    }
                    transition:name={`random-${c.id}`}
                  >
                    Random all but {index_allGenerated + 1} character
                  </a> */}

                  <div class="flex flex-col gap-5">
                    <div class="flex flex-row justify-between">
                      {!lockedIndexes.includes(index_allGenerated) ? (
                        <a
                          href={`/random_characters?all=${updateOneExceptArray(index_allGenerated).join("-")}&howMany=${howMany}&locked=${lockedIndexes.join("-")}`}
                          transition:name={`random-self-${c.id}`}
                        >
                          {/* Random {index_allGenerated + 1} character only */}
                          <Button
                            variant="secondary"
                            class="text-3xl flex items-center gap-2"
                          >
                            <Shuffle />
                            {index_allGenerated + 1}
                          </Button>
                        </a>
                      ) : (
                        <a
                          class="opacity-45"
                          transition:name={`random-self-${c.id}`}
                        >
                          {/* Random {index_allGenerated + 1} character only */}
                          <Button
                            class="cursor-not-allowed"
                            variant="secondary"
                            class="text-3xl flex items-center gap-2"
                          >
                            <Shuffle />
                            {index_allGenerated + 1}
                          </Button>
                        </a>
                      )}

                      <a
                        href={`/random_characters?all=${allGenerated.join("-")}&howMany=${howMany}&locked=${lockOrUnlockedIndex([...lockedIndexes], index_allGenerated).join("-")}`}
                        class="hover:underline"
                        transition:name={`lock-${c.id}`}
                      >
                        {!lockedIndexes.includes(index_allGenerated) ? (
                          <Button variant="secondary">
                            <LockKeyholeOpen />
                          </Button>
                        ) : (
                          <Button variant="secondary">
                            <Lock />
                          </Button>
                        )}{" "}
                        {/* {index_allGenerated + 1} character */}
                      </a>
                    </div>

                    <div class="flex flex-row justify-between">
                      {!lockedIndexes.includes(index_allGenerated) ? (
                        <div
                          transition:name={`position-${c.id}`}
                          class="flex flex-wrap gap-1"
                        >
                          <ArrowUpDown />{" "}
                          {/* Swap {index_allGenerated + 1} with the
                        position */}
                          {allGenerated.map((_, i) => {
                            if (i + 1 === index_allGenerated + 1) return;
                            if (lockedIndexes.includes(i)) {
                              return (
                                <Button
                                  variant="secondary"
                                  class="text-2xl h-[1.5rem] w-[1.5rem] cursor-not-allowed opacity-45"
                                >
                                  {i + 1}
                                </Button>
                              );
                            }

                            const result = swapItems(
                              [...allGenerated],
                              index_allGenerated,
                              i,
                            ).join("-");

                            return (
                              <a
                                href={`/random_characters?all=${result}&howMany=${howMany}&locked=${lockedIndexes.join("-")}`}
                                class="hover:underline"
                              >
                                <Button
                                  variant="secondary"
                                  class="text-2xl h-[1.5rem] w-[1.5rem]"
                                >
                                  {i + 1}
                                </Button>
                              </a>
                            );
                          })}
                        </div>
                      ) : (
                        <div
                          transition:name={`position-${c.id}`}
                          class="flex flex-wrap gap-1 opacity-45"
                        >
                          <ArrowUpDown />{" "}
                          {allGenerated.map((_, i) => {
                            if (i + 1 === index_allGenerated + 1) return;

                            return (
                              <Button
                                variant="secondary"
                                class="text-2xl h-[1.5rem] w-[1.5rem] cursor-not-allowed"
                              >
                                {i + 1}
                              </Button>
                            );
                          })}
                        </div>
                      )}

                      <a
                        href={`/compare?first=${c.id}`}
                        class="hover:underline flex gap-1"
                        transition:name={`compare-${c.id}`}
                      >
                        <Button>
                          <GitCompareArrows />
                        </Button>{" "}
                        {/* Compare using{" "}
                      {index_allGenerated + 1} character */}
                      </a>
                    </div>
                  </div>
                </div>
              );
            },
          )
      }
    </div>
  </main>
</Layout>
