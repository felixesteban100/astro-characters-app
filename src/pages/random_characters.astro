---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import { collectionCharacters } from "../lib/mongodb";

import { joinTeam_universe_power_toCharacter } from "../lib/charactersUtils";
import { getRandomIdRecursively } from "../lib/charactersUtils";
import { Button } from "$lib/components/ui/button";
import { Shuffle } from "lucide-astro";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";

// const someCharacters = await collectionCharacters
//   // .find()
//   // .sort("random")
//   // .limit(12)
//   // .toArray();
//   .aggregate([{ $sample: { size: 12 } }])
//   .toArray();

// const animateFade = Astro.url.searchParams.get("animateFade");
const first = Astro.url.searchParams.get("first");
const second = Astro.url.searchParams.get("second");
const third = Astro.url.searchParams.get("third");
const fourth = Astro.url.searchParams.get("fourth");

const firstId =
  first && first != "null" ? first : await getRandomIdRecursively();
const secondId =
  second && second != "null" ? second : await getRandomIdRecursively();
const thirdId =
  third && third != "null" ? third : await getRandomIdRecursively();
const fourthId =
  fourth && fourth != "null" ? fourth : await getRandomIdRecursively();

if (
  !first ||
  first === "null" ||
  !second ||
  second === "null" ||
  !third ||
  third === "null" ||
  !fourth ||
  fourth === "null"
) {
  return Astro.redirect(
    // `/random_characters?first=${firstId}&second=${secondId}&third=${thirdId}&fourth=${fourthId}&animateFade=${animateFade}`,
    `/random_characters?first=${firstId}&second=${secondId}&third=${thirdId}&fourth=${fourthId}`,
  );
}

const arrayOfIds = [
  parseInt(firstId),
  parseInt(secondId),
  parseInt(thirdId),
  parseInt(fourthId),
];

const selectedCharacters = await collectionCharacters
  .aggregate<CharacterWithJoinTeamUniversePower>(
    joinTeam_universe_power_toCharacter(
      {
        id: {
          $in: arrayOfIds,
        },
      },
      "id",
      "desc",
      0,
      4,
      [],
    ),
  )
  .toArray();

const charactersDictionary: { [key: string]: string } = {
  "0": "first",
  "1": "second",
  "2": "third",
  "3": "fourth",
};
---

<Layout title={`Random Characters`} animateFade={true}>
  <a slot="page_title_other_content" href={`/random_characters`}>
    <Button variant="ghost" size="icon">
      <Shuffle />
    </Button>
  </a>

  <main
    class="mb-32 flex flex-col justify-center items-center gap-5"
    slot="content"
  >
    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10 w-full`}
    >
      {
        selectedCharacters
          .sort((a, b) => arrayOfIds.indexOf(a.id) - arrayOfIds.indexOf(b.id))
          .map((c: CharacterWithJoinTeamUniversePower, index: number) => {
            return (
              <div class="flex flex-col gap-5 justify-center ">
                {/* id={`photo-${c.id}`} */}
                <a
                  href={`character?id=${c.id}&animateFade=true`}
                  class={`w-full h-full flex justify-center ${/* animateFade === "false" &&  */ "character-image"}`}
                  transition:name={`photo-${c.id}`}
                >
                  {/* id={`photo-${c.id}`}  */}
                  <CharacterCard c={c} />
                </a>

                {/* href={`/random_characters?${charactersDictionary[`${index}`]}=${c.id}&animateFade=${true}`} */}
                <a
                  href={`/random_characters?${charactersDictionary[`${index}`]}=${c.id}`}
                  class="hover:underline"
                  transition:name={`random-${c.id}`}
                >
                  Random all but {charactersDictionary[`${index}`]} character
                </a>

                {/* href={`/random_characters?first=${index === 0 ? null : firstId}&second=${index === 1 ? null : secondId}&third=${index === 2 ? null : thirdId}&fourth=${index === 3 ? null : fourthId}&animateFade=${true}`} */}
                <a
                  href={`/random_characters?first=${index === 0 ? null : firstId}&second=${index === 1 ? null : secondId}&third=${index === 2 ? null : thirdId}&fourth=${index === 3 ? null : fourthId}`}
                  class="hover:underline"
                  transition:name={`random-self-${c.id}`}
                >
                  Random {index + 1} character only
                </a>
                <a
                  href={`/compare?first=${c.id}`}
                  class="hover:underline"
                  transition:name={`compare-${c.id}`}
                >
                  Compare using {index + 1} character
                </a>
              </div>
            );
          })
      }
    </div>
  </main>
</Layout>
