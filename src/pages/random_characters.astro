---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import { collectionCharacters } from "../lib/mongodb";

import Image from "astro/components/Image.astro";
import { AlignmentTranslator } from "../lib/charactersUtils";
import { getRandomIdRecursively } from "../lib/charactersUtils";
import { Button } from "$lib/components/ui/button";
import { Shuffle } from "lucide-astro";

// const someCharacters = await collectionCharacters
//   // .find()
//   // .sort("random")
//   // .limit(12)
//   // .toArray();
//   .aggregate([{ $sample: { size: 12 } }])
//   .toArray();

const first = Astro.url.searchParams.get("first");
const second = Astro.url.searchParams.get("second");
const third = Astro.url.searchParams.get("third");
const fourth = Astro.url.searchParams.get("fourth");

const firstId = first ?? (await getRandomIdRecursively());
const secondId = second ?? (await getRandomIdRecursively());
const thirdId = third ?? (await getRandomIdRecursively());
const fourthId = fourth ?? (await getRandomIdRecursively());

if (!first || !second) {
  return Astro.redirect(
    `/random_characters?first=${firstId}&second=${secondId}&third=${thirdId}&fourth=${fourthId}`,
  );
}

const selectedCharacters = await collectionCharacters
  .find({
    id: {
      $in: [
        parseInt(firstId),
        parseInt(secondId),
        parseInt(thirdId),
        parseInt(fourthId),
      ],
    },
  })
  .toArray();
---

<Layout title={`Random Characters`}>
  <main class="mb-32 flex flex-col justify-center items-center gap-5">
    <div class="flex justify-between items-center w-full">
      <p class="font-bold text-3xl">Random Characters</p>
      <div>
        <a href={`/random_characters`}>
          <Button variant="ghost" size="icon"><Shuffle /></Button>
        </a>
      </div>
    </div>

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10 w-full`}
    >
      {
        selectedCharacters.map((c) => {
          return (
            <a href={`/${c.id}`} class="uppercase font-medium ">
              <div class="group/character flex flex-col justify-center items-center xl:items-start gap-5 w-full h-full">
                <div class="relative box characterId">
                  <Image
                    class={`object-cover h-[25rem] w-[25rem] rounded-md transition-all duration-500 group-hover/character:opacity-30`}
                    width={800}
                    height={800}
                    src={c.images.md}
                    loading="eager"
                    transition:name={`media-image-${c.id}`}
                    alt={c.name}
                  />
                </div>
                <div class="flex flex-col gap-2">
                  <p class="font-bold text-xl">
                    {" "}
                    <span class="text-primary">{c.id} |</span> {c.name}
                  </p>
                  <p class="text-secondary-foreground">
                    {c.biography.publisher} |{" "}
                    {AlignmentTranslator(c.biography.alignment)}
                  </p>
                </div>
              </div>
            </a>
          );
        })
      }
    </div>
  </main>
</Layout>
