---
import { CHARACTERS_PER_PAGE } from "$lib/constants/constants";
import Pagination from "src/components/Pagination.svelte";
import Drawer from "src/components/Drawer.svelte";
import { collectionTeams } from "../lib/mongodb";
import Layout from "src/layouts/Layout.astro";
import Sheet from "src/components/Sheet.svelte";
import { Filter } from "lucide-astro";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const universe = Astro.url.searchParams.get("universe") ?? "All";

const offset = (parseInt(currentPage) - 1) * CHARACTERS_PER_PAGE;

const queryOptions = universe !== "All" ? { "universe.value": universe } : {};

const teams = await collectionTeams
  .find(queryOptions)
  .limit(CHARACTERS_PER_PAGE)
  .skip(offset)
  .toArray();

const teamsLenght = await collectionTeams.countDocuments(queryOptions);

const universesWithTeams: string[] = ["Marvel Comics", "DC Comics", "Shueisha"];

const imgUniverse: { [key: string]: string } = {
  "Marvel Comics":
    "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Marvel_Logo.svg/1200px-Marvel_Logo.svg.png",
  "DC Comics":
    "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3d/DC_Comics_logo.svg/1200px-DC_Comics_logo.svg.png",
  Shueisha:
    "https://www.shueisha.co.jp/wp-content/themes/shueisha/image/en/mv/mv_subtitle_01.png",
};
---

<Layout title="Teams">
  <div class="flex justify-between items-center w-full">
    {
      universe !== "All" ? (
        <div class="flex justify-start gap-5 items-center">
          <p class="font-bold text-3xl">{universe}</p>
          <img
            src={imgUniverse[`${universe}`]}
            class="h-10 w-auto"
            width={200}
            height={200}
            alt=""
          />
        </div>
      ) : (
        <p class="font-bold text-3xl">All Universe's teams</p>
      )
    }
    <div class="flex justify-end">
      <Sheet client:load ButtonClassName="">
        <Filter slot="trigger" />
        <div slot="content">
          <!-- this filter is not working as expected :/ -->
          <div class="flex flex-col justify-center items-center gap-5 my-5">
            {
              universesWithTeams.map((uni) => (
                <a
                  href={`/teams?universe=${uni}&currentPage=1`}
                  class={`${uni === universe ? "underline" : ""}`}
                >
                  <span>{uni}</span>
                </a>
              ))
            }
          </div>
        </div>
      </Sheet>
    </div>
  </div>

  <div
    class="w-full grid 2xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-5 my-11 justify-center items-center"
  >
    {
      teams.map((team) => {
        const fiveRandomMembers = team.members
          .sort(() => 0.5 - Math.random())
          .slice(0, 5);

        return (
          <div class="flex flex-col justify-between items-center gap-5 p-5 h-full">
            <div class="flex flex-col justify-between items-center gap-5 h-full">
              <p class="text-3xl font-bold">{team.name}</p>

              {team.img !== "" && (
                <img
                  src={team.img}
                  height={500}
                  width={500}
                  alt={team.name}
                  class={`w-[20rem] h-auto col-span-1`}
                />
                /* transition:name={`media-image-${team.value}`} */
              )}

              <a
                href={`/characters?universe=${team.universe.value}&team=${team.value}`}
                class="hover:underline"
              >
                Go to team
              </a>

              <Drawer client:load>
                <p slot="trigger">More info</p>
                <div
                  class="flex flex-col justify-center items-center gap-5 px-10"
                  slot="content"
                >
                  {team.img !== "" && (
                    <img
                      src={team.img}
                      height={500}
                      width={500}
                      alt={team.name}
                      class={`w-[20rem] h-auto col-span-1`}
                    />
                  )}
                  <div class="flex flex-col justify-center gap-5 items-start max-w-[400px]">
                    <div class="flex justify-between items-center gap-5 w-full">
                      <p class="font-bold text-3xl">{team.name}</p>
                      <img src={team.universe.img} class="h-10 w-auto" alt="" />
                    </div>
                    <p>{team.description}</p>
                    <div>
                      <p class="font-medium mb-2">
                        Members (total = {team.members.length}):{" "}
                      </p>
                      <div class="flex flex-col gap-5">
                        {fiveRandomMembers.map((c) => {
                          return (
                            <a href={`/${c.id}`} class="hover:underline">
                              {c.name}
                            </a>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                </div>
              </Drawer>
            </div>
          </div>
        );
      })
    }
  </div>

  {
    teamsLenght > CHARACTERS_PER_PAGE && (
      <Pagination
        currentPage={currentPage}
        url={`/teams?universe=${universe}&currentPage=`}
        countItems={teamsLenght}
        howManyPerPage={CHARACTERS_PER_PAGE}
        client:only
      />
    )
  }
</Layout>
