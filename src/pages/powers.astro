---
import { CHARACTERS_PER_PAGE } from "$lib/constants/constants";
import {
  BackgroundColorScore,
  BackgroundColorTier,
} from "$lib/charactersUtils";
import Pagination from "src/components/Pagination.svelte";
import { collectionPowers } from "../lib/mongodb";
import Layout from "src/layouts/Layout.astro";
import FilterPowers from "src/components/FilterPowers.svelte";
import { Filter } from "lucide-astro";
import Drawer from "src/components/Drawer.svelte";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const powerName = Astro.url.searchParams.get("powerName") ?? "";
const tierRange: number[] = JSON.parse(
  `[${Astro.url.searchParams.get("tierRange")}]`,
)
  .map((c: string) => parseInt(c))
  .filter((i: number) => (i ? true : false));

const howManyPerPage = parseInt(
  Astro.url.searchParams.get("howManyPerPage") ??
    CHARACTERS_PER_PAGE.toString(),
);

const offset = (parseInt(currentPage) - 1) * howManyPerPage;

const query: { name?: { $in: RegExp[] }; tier?: { $in: number[] } } = {};

if (powerName !== "") {
  query.name = {
    $in: powerName.split(",").map((c) => {
      return new RegExp(c.trim(), "ig");
    }),
  };
}

if (tierRange.length > 0) {
  query.tier = {
    $in: tierRange,
  };
}

const powers = await collectionPowers
  .find(query)
  .sort({ id: -1 })
  .limit(howManyPerPage)
  .skip(offset)
  .toArray();

const powersLenght = await collectionPowers.find(query).toArray();
---

<Layout title="Powers">
  <FilterPowers
    howManyPerPage={howManyPerPage}
    powerName={powerName}
    tierRange={tierRange}
    client:load
    slot="page_title_other_content"
  >
    <div class="flex gap-5" slot="trigger">
      <Filter />
      <span class="text-primary hidden lg:flex">|</span>
      <span class="text-primary hidden lg:flex">(Press T)</span>
    </div>
  </FilterPowers>

  <div class="flex flex-col items-center justify-center" slot="content">
    {powers.length === 0 && <p class="text-4xl">No powers found</p>}

    <!-- 2xl:grid-cols-4 md:grid-cols-3 grid-cols-2 -->
    <div
      class="w-full grid 2xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-16"
    >
      {
        powers.map((power) => {
          return (
            <div class="group/power flex flex-col justify-center items-center gap-5">
              {/* class="my-5 p-5 border rounded-md" */}
              <div class="flex flex-col gap-5 justify-center items-center">
                <a
                  href={`/characters?power=${power.value}`}
                  class="hover:underline"
                >
                  <p class="text-xl font-bold">
                    <span class="text-primary">{power.id} |</span> {power.name}
                  </p>
                </a>

                {power.img !== "" && (
                  <img
                    src={power.img}
                    height={500}
                    width={500}
                    alt={power.name}
                    class={`w-[20rem] h-[15rem] col-span-1 object-cover rounded-md`}
                  />
                )}

                <div class="flex flex-col justify-center items-end gap-5 w-full">
                  <div class="flex justify-between items-center gap-2 w-full">
                    <p
                      class={`px-2 ${BackgroundColorTier(power.tier)} rounded-full font-semibold transition-all`}
                    >
                      Tier {power.tier}
                    </p>
                    <p
                      class={`px-2 ${BackgroundColorScore(power.score)} rounded-full font-semibold transition-all`}
                    >
                      + {power.score}
                    </p>
                  </div>

                  <Drawer client:load>
                    <p slot="trigger">More info</p>
                    <div
                      class="flex flex-col justify-center items-center gap-5 px-10 border-none"
                      slot="content"
                    >
                      <p class="font-bold text-3xl">{power.name}</p>
                      {power.img !== "" && (
                        <img
                          src={power.img}
                          height={500}
                          width={500}
                          alt={power.name}
                          class={`w-[15rem] h-auto col-span-1`}
                        />
                      )}

                      <div class="flex justify-between items-center gap-2 w-[15rem]">
                        <p
                          class={`px-2 ${BackgroundColorTier(power.tier)} rounded-full font-semibold transition-all`}
                        >
                          Tier {power.tier}
                        </p>
                        <p
                          class={`px-2 ${BackgroundColorScore(power.score)} rounded-full font-semibold transition-all`}
                        >
                          + {power.score}
                        </p>
                      </div>

                      <div class="flex flex-col justify-start gap-5 items-start max-w-[400px]">
                        <p>Description: {power.description}</p>
                      </div>
                    </div>
                  </Drawer>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>

    {
      powersLenght.length > howManyPerPage && (
        <Pagination
          currentPage={currentPage}
          url={`/powers?powerName=${powerName}&howManyPerPage=${howManyPerPage}&currentPage=`}
          countItems={powersLenght.length}
          howManyPerPage={howManyPerPage}
          client:only
        />
      )
    }
  </div>
</Layout>
