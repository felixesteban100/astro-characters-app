---
import { CHARACTERS_PER_PAGE } from "$lib/constants/constants";
import {
  BackgroundColorScore,
  BackgroundColorTier,
} from "$lib/charactersUtils";
import Pagination from "src/components/Pagination.svelte";
import { collectionPowers } from "../lib/mongodb";
import Layout from "src/layouts/Layout.astro";
import FilterPowers from "src/components/FilterPowers.svelte";
import { Filter } from "lucide-astro";
import PowerCard from "src/components/powers_page/PowerCard.astro";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const powerName = Astro.url.searchParams.get("powerName") ?? "";
const tierRange: number[] = JSON.parse(
  `[${Astro.url.searchParams.get("tierRange")}]`,
)
  .map((c: string) => parseInt(c))
  .filter((i: number) => (i ? true : false));

const howManyPerPage = parseInt(
  Astro.url.searchParams.get("howManyPerPage") ??
    CHARACTERS_PER_PAGE.toString(),
);

const offset = (parseInt(currentPage) - 1) * howManyPerPage;

const query: { name?: { $in: RegExp[] }; tier?: { $in: number[] } } = {};

if (powerName !== "") {
  query.name = {
    $in: powerName.split(",").map((c) => {
      return new RegExp(c.trim(), "ig");
    }),
  };
}

if (tierRange.length > 0) {
  query.tier = {
    $in: tierRange,
  };
}

const [powers, powersLenght] = await Promise.all([
  collectionPowers
    .find(query)
    .sort({ id: -1 })
    .limit(howManyPerPage)
    .skip(offset)
    .toArray(),
  collectionPowers.find(query).toArray(),
]);
---

<Layout title="Powers">
  <FilterPowers
    howManyPerPage={howManyPerPage}
    powerName={powerName}
    tierRange={tierRange}
    client:load
    slot="page_title_other_content"
  >
    <div class="flex gap-5" slot="trigger">
      <Filter />
      <span class="text-primary hidden lg:flex">|</span>
      <span class="text-primary hidden lg:flex">(Press T)</span>
    </div>
  </FilterPowers>

  <div class="flex flex-col items-center justify-center" slot="content">
    {powers.length === 0 && <p class="text-4xl">No powers found</p>}

    <!-- 2xl:grid-cols-4 md:grid-cols-3 grid-cols-2 -->
    <div
      class="w-full grid 2xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-16"
    >
      {
        powers.map((power) => {
          return <PowerCard {power} />;
        })
      }
    </div>

    {
      powersLenght.length > howManyPerPage && (
        <Pagination
          currentPage={currentPage}
          url={`/powers?powerName=${powerName}&howManyPerPage=${howManyPerPage}&tierRange=${tierRange}&currentPage=`}
          countItems={powersLenght.length}
          howManyPerPage={howManyPerPage}
          client:only
        />
      )
    }
  </div>
</Layout>
