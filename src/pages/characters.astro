---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionTeams,
  collectionUniverses,
} from "../lib/mongodb";

import {
  joinTeam_universe_power_toCharacter,
  getQueryOptions,
} from "../lib/charactersUtils";
import { CHARACTERS_PER_PAGE } from "../lib/constants/constants";

import Pagination from "../components/Pagination.svelte";
import FilterCharacters from "../components/FilterCharacters.svelte";
import Sheet from "src/components/Sheet.svelte";
import { Filter } from "lucide-astro";
import NameAndImage from "src/components/characters_page/NameAndImage.astro";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";
import __AstroComponent_ from "node_modules/lucide-astro/dist/.Layout.astro";
// import navigate from 'astro:transitions/client';

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const power = Astro.url.searchParams.get("power") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

const sortBy = Astro.url.searchParams.get("sortBy") ?? "id";
const sortDirection = Astro.url.searchParams.get("sortDirection") ?? "desc";

const howManyPerPage = parseInt(
  Astro.url.searchParams.get("howManyPerPage") ??
    CHARACTERS_PER_PAGE.toString(),
);

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const universeForm = data.get("universe");
    const teamForm = data.get("team");

    return Astro.redirect(
      `/characters?characterName=${data.get("characterName")}&howManyPerPage=${data.get("howManyPerPage")}&gender=${data.get("gender")}&side=${data.get("side")}&race=${data.get("race")}${universeForm ? `&universe=${universeForm}&team=${universeForm === universe ? teamForm : "All"}` : `&universe="All"&team="All"`}&currentPage=${1}`,
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const valuesFilter = {
  side,
  universe,
  team,
  gender,
  race,
  power,
};

const queryOptions: QueryOptions = getQueryOptions({
  ...valuesFilter,
  characterName,
  characterOrFullName,
  includesOrExact,
});

const offset = (parseInt(currentPage) - 1) * howManyPerPage;

const characterdDisplayLenght = await collectionCharacters
  .aggregate<CharacterWithJoinTeamUniversePower>(
    joinTeam_universe_power_toCharacter(
      queryOptions,
      sortBy,
      sortDirection,
      0,
      1000,
    ),
  )
  .toArray();

// console.log("queryOptions", queryOptions);

const characterJoinTeamAndUniverse = await collectionCharacters
  .aggregate<CharacterWithJoinTeamUniversePower>(
    joinTeam_universe_power_toCharacter(
      queryOptions,
      sortBy,
      sortDirection,
      offset,
      howManyPerPage,
    ),
  )
  .toArray();

const universesWithTeams = await collectionUniverses
  .aggregate<UniverseWithJoinTeams>([
    {
      $lookup: {
        from: "teams",
        localField: "teams",
        foreignField: "id",
        pipeline: [
          {
            $project: {
              universe: 0,
              comics: 0,
            },
          },
        ],
        as: "teams",
      },
    },
    { $match: { teams: { $exists: true, $not: { $size: 0 } } } },
  ])
  .toArray();

const attritutesFilteredArr = Object.entries(valuesFilter).filter(
  ([key, value]) => value !== "All" && value !== "both",
);

const allUniverses = await collectionUniverses
  .find({})
  .sort({ _id: 1 })
  .toArray();
const allPowers = await collectionPowers.find({}).sort({ _id: 1 }).toArray();

// const allTeams = await collectionTeams.find({}).sort({ id: -1 }).toArray();
// allTeams.forEach((teamsToUpdate) => {
//   teamsToUpdate.members.forEach(async (character) => {
//     const changeNameForIdPowers = await collectionCharacters.updateOne(
//       { name: character.name },
//       {
//         $addToSet: {
//           "connections.groupAffiliation": teamsToUpdate.id,
//         },
//       },
//     );
//   });
// });
---

<Layout
  title={team && team !== "All"
    ? team
    : universe && universe !== "All"
      ? universe
      : `Characters`}
>
  <main class="mb-32 flex flex-col justify-center items-center gap-5">
    <!-- <HeroSection /> -->

    <div class="flex justify-between items-center w-full">
      <div
        class="flex flex-col lg:flex-row justify-start items-start gap-4 w-full"
      >
        {
          attritutesFilteredArr.length > 0 ? (
            attritutesFilteredArr.map(([key, value], index) => {
              return (
                <div class="flex flex-row justify-start gap-5 items-center">
                  <NameAndImage name={value.toString()} />
                  {index < attritutesFilteredArr.length - 1 && (
                    <p class="font-bold text-3xl hidden lg:block">|</p>
                  )}
                </div>
              );
            })
          ) : (
            <p class="font-bold text-3xl">Characters</p>
          )
        }
      </div>
      <div>
        <Sheet client:load ButtonClassName="">
          <Filter slot="trigger" />
          <div slot="content">
            <FilterCharacters
              characterOrFullName={characterOrFullName}
              howManyPerPage={howManyPerPage}
              includesOrExact={includesOrExact}
              characterName={characterName}
              gender={gender}
              side={side}
              race={race}
              power={power}
              universe={universe}
              team={team}
              sortBy={sortBy}
              sortDirection={sortDirection}
              universesWithTeams={universesWithTeams}
              allUniverses={allUniverses}
              allPowers={allPowers}
              client:load
            />
          </div>
        </Sheet>
      </div>
    </div>

    {
      characterJoinTeamAndUniverse.length < 1 ? (
        <p class="text-5xl w-full text-center">No characters found</p>
      ) : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10 w-full`}
    >
      {
        characterJoinTeamAndUniverse.map((c) => {
          // console.log(c.powers);
          return (
            <a
              href={`character?id=${c.id}`}
              class="w-full h-full flex justify-center"
            >
              <CharacterCard c={c} />
            </a>
          );
        })
      }
    </div>

    {
      characterdDisplayLenght.length > howManyPerPage && (
        <Pagination
          currentPage={currentPage}
          countItems={characterdDisplayLenght.length}
          howManyPerPage={howManyPerPage}
          url={`/characters?characterName=${characterName ?? ""}&gender=${gender ?? "both"}&side=${side ?? "All"}&race=${race ?? "All"}&power=${power ?? "All"}&universe=${universe ?? "All"}&team=${team ?? "All"}&characterOrFullName=${characterOrFullName}&includesOrExact=${includesOrExact}&sortBy=${sortBy}&sortDirection=${sortDirection}&howManyPerPage=${howManyPerPage}&currentPage=`}
          client:only
        />
      )
    }
  </main>
</Layout>
