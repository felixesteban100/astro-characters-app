---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionTeams,
  collectionUniverses,
} from "../lib/mongodb";

import Image from "astro/components/Image.astro";
import { AlignmentTranslator, getQueryOptions } from "../lib/charactersUtils";
import { CHARACTERS_PER_PAGE } from "../lib/constants/constants";

import Pagination from "../components/Pagination.svelte";
import FilterCharacters from "../components/FilterCharacters.svelte";
import Sheet from "src/components/Sheet.svelte";
import { Filter } from "lucide-astro";
import { type Sort } from "mongodb";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
// const characterName = "hulk, batman, spider-man, wolverine, flash ii, captain marvel, ironman, wonder woman, superman";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const power = Astro.url.searchParams.get("power") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

const sortBy = Astro.url.searchParams.get("sortBy") ?? "id";
const sortDirection = Astro.url.searchParams.get("sortDirection") ?? "desc";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const characterNameForm = data.get("characterName");
    const genderForm = data.get("gender");
    const sideForm = data.get("side");
    const raceForm = data.get("race");
    const universeForm = data.get("universe");
    const teamForm = data.get("team");

    return Astro.redirect(
      `/characters?characterName=${characterNameForm}&gender=${genderForm}&side=${sideForm}&race=${raceForm}${universeForm ? `&universe=${universeForm}&team=${universeForm === universe ? teamForm : "All"}` : `&universe="All"&team="All"`}&currentPage=${1}`,
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const queryOptions: QueryOptions = getQueryOptions(
  characterName,
  side,
  universe,
  team,
  gender,
  race,
  power,
  characterOrFullName,
  includesOrExact,
);

const offset = (parseInt(currentPage) - 1) * CHARACTERS_PER_PAGE;

const characterdDisplayLenght =
  await collectionCharacters.countDocuments(queryOptions);

const someCharacters = await collectionCharacters
  .find({ ...queryOptions })
  .limit(CHARACTERS_PER_PAGE)
  .sort({ [`${sortBy}`]: sortDirection } as Sort)
  .skip(offset)
  .toArray();

const powerInfo = await collectionPowers.findOne({
  value: power !== "All" ? power : "",
});
const universeInfo = await collectionUniverses.findOne({
  value: universe !== "All" ? universe : "",
});
const teamInfo = universeInfo?.teams.find((t) => t.value === team); // i think this one is faster
// const teamInfo = await collectionTeams.findOne({ value: team }); // and this one slower (cause it calls the mongodb)

const universesWithTeams = await collectionUniverses
  .find({ teams: { $exists: true, $not: { $size: 0 } } })
  .toArray();

// add description to all teams
// const currentTeamsToUpdate: {[key: string]: string} = {}

// const setData = await collectionTeams.updateMany({value: team}, {
//       $set: {
//         description: currentTeamsToUpdate[`${team}`]
//       }
//     }
// );
//add description to all teams
---

<Layout
  title={team && team !== "All"
    ? team
    : universe && universe !== "All"
      ? universe
      : `Characters`}
>
  <main class="mb-32 flex flex-col justify-center items-center gap-5">
    <div class="flex justify-between items-center w-full">
      <div class="flex flex-col justify-center items-start gap-10">
        {
          team && team !== "All" && teamInfo ? (
            <div class="flex justify-center gap-5 items-center">
              <p class="font-bold text-3xl">{team}</p>
              <Image
                src={teamInfo.img}
                class="h-10 w-auto"
                width={200}
                height={200}
                alt=""
                transition:name={`media-image-${teamInfo.value}`}
              />
            </div>
          ) : universeInfo && universe !== "All" ? (
            <div class="flex justify-center gap-5 items-center">
              <p class="font-bold text-3xl">{universe}</p>
              <Image
                src={universeInfo.img}
                class="h-10 w-auto"
                width={200}
                height={200}
                alt=""
                transition:name={`media-image-${universe}`}
              />
            </div>
          ) : null
        }

        {
          power && power !== "All" && powerInfo && (
            <div class="flex justify-center gap-5 items-center">
              <p class="font-bold text-3xl">{powerInfo.name}</p>
              {powerInfo && powerInfo?.img !== "" && (
                <img
                  class="h-10 w-auto"
                  src={powerInfo.img}
                  alt={power}
                  transition:name={`media-image-power-${powerInfo.value}`}
                />
              )}
            </div>
          )
        }
      </div>
      <div>
        <Sheet client:load ButtonClassName="">
          <Filter slot="trigger" />
          <div slot="content">
            <!-- this filter is not working as expected :/ -->
            <FilterCharacters
              characterOrFullName={characterOrFullName}
              includesOrExact={includesOrExact}
              characterName={characterName}
              gender={gender}
              side={side}
              race={race}
              power={power}
              universe={universe}
              team={team}
              sortBy={sortBy}
              sortDirection={sortDirection}
              universesWithTeams={universesWithTeams}
              client:load
            />
          </div>
        </Sheet>
      </div>
    </div>

    {
      someCharacters.length < 1 ? (
        <p class="text-5xl w-full text-center">No characters found</p>
      ) : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10 w-full`}
    >
      {
        someCharacters.map((c) => {
          return (
            <a href={`/${c.id}`} class="uppercase font-medium ">
              <div class="group/character flex flex-col justify-center items-center xl:items-start gap-5 w-full h-full">
                <div class="relative box characterId">
                  <Image
                    class={`object-cover h-[25rem] w-[25rem] rounded-md transition-all duration-500 group-hover/character:opacity-30`}
                    width={800}
                    height={800}
                    src={c.images.md}
                    loading="eager"
                    transition:name={`media-image-${c.id}`}
                    alt={c.name}
                  />
                </div>
                <div class="flex flex-col gap-2">
                  <p class="font-bold text-xl">
                    {" "}
                    <span class="text-primary">{c.id} |</span> {c.name}
                  </p>
                  <p class="text-secondary-foreground">
                    {c.biography.publisher} |{" "}
                    {AlignmentTranslator(c.biography.alignment)}
                  </p>
                </div>
              </div>
            </a>
          );
        })
      }
    </div>
    {
      characterdDisplayLenght > CHARACTERS_PER_PAGE && (
        <Pagination
          currentPage={currentPage}
          countItems={characterdDisplayLenght}
          url={`/characters?characterName=${characterName ?? ""}&gender=${gender ?? "both"}&side=${side ?? "All"}&race=${race ?? "All"}&power=${power ?? "All"}&universe=${universe ?? "All"}&team=${team ?? "All"}&characterOrFullName=${characterOrFullName}&includesOrExact=${includesOrExact}&sortBy=${sortBy}&sortDirection=${sortDirection}&currentPage=`}
          client:only
        />
      )
    }
  </main>
</Layout>

<!-- // characterName={characterName}
      // gender={gender}
      // side={side}
      // race={race}
      // power={power}
      // universe={universe}
      // team={team}
      // characterOrFullName={characterOrFullName}
      // includesOrExact={includesOrExact}
      // sortBy={sortBy}
      // sortDirection={sortDirection} -->
