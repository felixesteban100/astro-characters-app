---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionUniverses,
} from "../lib/mongodb";

import {
  joinTeam_universe_power_toCharacter,
  getQueryOptions,
  AlignmentTranslator,
} from "../lib/charactersUtils";
import { CHARACTERS_PER_PAGE } from "../lib/constants/constants";

import Pagination from "../components/Pagination.svelte";
import FilterCharacters from "../components/FilterCharacters.svelte";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";
import { Filter } from "lucide-astro";
import LoaderAstro from "src/components/LoaderAstro.astro";
import HeroSection from "src/components/HeroSection.astro";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const power = Astro.url.searchParams.get("power") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

const sortBy = Astro.url.searchParams.get("sortBy") ?? "id";
const sortDirection = Astro.url.searchParams.get("sortDirection") ?? "desc";

const howManyPerPage = parseInt(
  Astro.url.searchParams.get("howManyPerPage") ??
    CHARACTERS_PER_PAGE.toString(),
);

const valuesFilter = {
  side,
  universe,
  team,
  gender,
  race,
  power,
};

const queryOptions: QueryOptions = getQueryOptions({
  ...valuesFilter,
  characterName,
  characterOrFullName,
  includesOrExact,
});

const offset = (parseInt(currentPage) - 1) * howManyPerPage;

const characterdDisplayLenght = await collectionCharacters
  .aggregate<CharacterWithJoinTeamUniversePower>(
    joinTeam_universe_power_toCharacter(
      queryOptions,
      sortBy,
      sortDirection,
      0,
      1000,
      [],
    ),
  )
  .toArray();

const charactersName =
  characterName.split(",").length < 0 ? [] : characterName.split(",");

const characterJoinTeamAndUniverse = await collectionCharacters
  .aggregate<CharacterWithJoinTeamUniversePower>(
    joinTeam_universe_power_toCharacter(
      queryOptions,
      sortBy,
      sortDirection,
      offset,
      howManyPerPage,
      charactersName,
    ),
  )
  .toArray();

const universesWithTeams = await collectionUniverses
  .aggregate<UniverseWithJoinTeams>([
    {
      $lookup: {
        from: "teams",
        localField: "id",
        foreignField: "universe",
        pipeline: [
          {
            $project: {
              universe: 0,
              comics: 0,
            },
          },
          { $sort: { name: 1 } },
        ],
        as: "teams",
      },
    },
    { $match: { teams: { $exists: true, $not: { $size: 0 } } } },
  ])
  .toArray();

const allUniverses = await collectionUniverses
  .find({})
  .sort({ id: 1 })
  .toArray();
const allPowers = await collectionPowers.find({}).sort({ name: 1 }).toArray();

// const allTeams = await collectionTeams.find({}).sort({ id: -1 }).toArray();
// allTeams.forEach((teamsToUpdate) => {
//   teamsToUpdate.members.forEach(async (character) => {
//     const changeNameForIdPowers = await collectionCharacters.updateOne(
//       { name: character.name },
//       {
//         $addToSet: {
//           "connections.groupAffiliation": teamsToUpdate.id,
//         },
//       },
//     );
//   });
// });

const attritutesFilteredArr = Object.entries({
  ...valuesFilter,
  side: AlignmentTranslator(valuesFilter.side),
}).filter(([key, value]) => value !== "All" && value !== "both");

function getTitle(): string {
  return attritutesFilteredArr.length > 0
    ? attritutesFilteredArr.reduce((acc, [key, value], index) => {
        if (index > 0) {
          if (key) acc = acc + " | " + value.toString();
        } else {
          acc = value.toString();
        }

        return acc;
      }, "")
    : "Characters";
}

const [universeSelected] = universesWithTeams.filter(
  (c) => c.value === universe,
);

const [teamSelected] = universeSelected
  ? universeSelected?.teams.filter((c) => c.value === team)
  : [undefined];

const [powerSelected] =
  allPowers && power ? allPowers.filter((c) => c.value === power) : [undefined];
---

<script>
  document.addEventListener("keydown", (e) => {
    if (e.key === "t") {
      const buttonSheetTrigger = document.getElementById("filterCharacters");
      buttonSheetTrigger?.click();
    }
  });
</script>

<Layout title={getTitle()} showTitle={false}>
  <FilterCharacters
    characterOrFullName={characterOrFullName}
    howManyPerPage={howManyPerPage}
    includesOrExact={includesOrExact}
    characterName={characterName}
    gender={gender}
    side={side}
    race={race}
    power={power}
    universe={universe}
    team={team}
    sortBy={sortBy}
    sortDirection={sortDirection}
    universesWithTeams={universesWithTeams}
    allUniverses={allUniverses}
    allPowers={allPowers}
    client:load
    slot="page_title_other_content"
  >
    <div class="flex gap-5" slot="trigger">
      <Filter />
      <span class="text-primary hidden lg:flex">|</span>
      <span class="text-primary hidden lg:flex">(Press T)</span>
    </div>
  </FilterCharacters>

  <div slot="images_of_applied_filters">
    {
      attritutesFilteredArr.length > 0 ? (
        <div class="flex flex-col md:flex-row justify-start items-center gap-5">
          {universeSelected && (
            <figure class="shrink-0 flex flex-col justify-center items-center h-full">
              <div class="overflow-hidden rounded-md">
                <img
                  src={universeSelected.logo}
                  alt={universeSelected.name}
                  width={60}
                  height={60}
                />
              </div>

              <p class="pt-2 text-xs text-muted-foreground">
                Universe -{" "}
                <span class="font-semibold text-foreground">
                  {universeSelected.name}
                </span>
              </p>
            </figure>
          )}
          {teamSelected && (
            <figure class="shrink-0 flex flex-col justify-center items-center h-full">
              <div class="overflow-hidden rounded-md">
                <img
                  src={teamSelected.logo}
                  alt={`Photo by`}
                  width={120}
                  height={120}
                />
              </div>

              <p class="pt-2 text-xs text-muted-foreground">
                Team -{" "}
                <span class="font-semibold text-foreground">
                  {teamSelected.name}
                </span>
              </p>
            </figure>
          )}
          {powerSelected && (
            <figure class="shrink-0 flex flex-col justify-center items-center h-full">
              <div class="overflow-hidden rounded-md">
                <img
                  src={powerSelected.img}
                  alt={`Photo by`}
                  width={60}
                  height={60}
                />
              </div>

              <p class="pt-2 text-xs text-muted-foreground">
                Power -{" "}
                <span class="font-semibold text-foreground">
                  {powerSelected.name}
                </span>
              </p>
            </figure>
          )}
        </div>
      ) : (
        <p class="font-bold text-3xl">{getTitle()}</p>
      )
    }
  </div>

  <main
    class="mb-32 flex flex-col justify-center items-center gap-5 mt-10"
    slot="content"
  >
    <!-- <HeroSection /> -->

    {
      characterJoinTeamAndUniverse.length < 1 ? (
        <p class="text-5xl w-full text-center">No characters found</p>
      ) : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-y-16 gap-10 w-full`}
    >
      {
        characterJoinTeamAndUniverse.map((c) => {
          return (
            <CharacterCard
              c={c}
              withTransitionName={false}
              withLink={true}
              otherClasses="w-full h-full flex justify-center character-image"
            />
          );
        })
      }
    </div>

    {
      characterdDisplayLenght.length > howManyPerPage && (
        <div>
          <LoaderAstro />
          <div id="actionDoer">
            <Pagination
              currentPage={currentPage}
              countItems={characterdDisplayLenght.length}
              howManyPerPage={howManyPerPage}
              url={`/characters?characterName=${characterName ?? ""}&gender=${gender ?? "both"}&side=${side ?? "All"}&race=${race ?? "All"}&power=${power ?? "All"}&universe=${universe ?? "All"}&team=${team ?? "All"}&characterOrFullName=${characterOrFullName}&includesOrExact=${includesOrExact}&sortBy=${sortBy}&sortDirection=${sortDirection}&howManyPerPage=${howManyPerPage}&currentPage=`}
              client:only
            />
          </div>
        </div>
      )
    }
  </main>
</Layout>
