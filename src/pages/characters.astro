---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import { collectionCharacters } from "../lib/mongodb";

import Image from "astro/components/Image.astro";

import {
  getTeamByUniverse,
} from "../lib/constants";
import { publisherIMG, getQueryOptions, GetColorLogosByPublisher, GetColorOfTheLogoByTeam } from "../lib/charactersUtils";
import { CHARACTERS_PER_PAGE } from "../lib/constants";

import Pagination from "../components/Pagination.svelte";
import FilterCharacters from "../components/FilterCharacters.svelte";
import Sheet from "src/components/Sheet.svelte";
import { Filter } from "lucide-astro";


const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
// const characterName = "hulk, batman, spider-man, wolverine, flash ii, captain marvel, ironman, wonder woman, superman";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const characterNameForm = data.get("characterName");
    const genderForm = data.get("gender");
    const sideForm = data.get("side");
    const raceForm = data.get("race");
    const universeForm = data.get("universe");
    const teamForm = data.get("team");

    return Astro.redirect(
      `/characters?characterName=${characterNameForm}&gender=${genderForm}&side=${sideForm}&race=${raceForm}${universeForm ? `&universe=${universeForm}&team=${universeForm === universe ? teamForm : "All"}` : `&universe="All"&team="All"`}&currentPage=${1}`
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const queryOptions: QueryOptions = getQueryOptions(
  characterName,
  side,
  universe,
  team,
  gender,
  race,
  characterOrFullName,
  includesOrExact
);

const offset = (parseInt(currentPage) - 1) * CHARACTERS_PER_PAGE;

const characterdDisplayLenght =
  await collectionCharacters.countDocuments(queryOptions);

const someCharacters = await collectionCharacters
  .find({ ...queryOptions })
  .limit(CHARACTERS_PER_PAGE)
  .sort({ id: "desc" })
  .skip(offset)
  .toArray();


const teamInfo = getTeamByUniverse(universe ?? "").find(
  (t) => t.value === team
);

---

<Layout
  title={team && team !== "All"
    ? team
    : universe && universe !== "All"
      ? universe
      : `Characters`}
>
  <main class="mb-32 flex flex-col justify-center items-center gap-5">
    <div class="w-full flex justify-end">
      <Sheet client:load ButtonClassName="">
        <Filter slot="trigger" />
        <div slot="content">
          <FilterCharacters
            characterName={characterName}
            gender={gender}
            side={side}
            race={race}
            universe={universe}
            team={team}
            client:load
          />
        </div>
      </Sheet>
    </div>

    {
      team && team !== "All" && teamInfo !== undefined ? (
        <Image class={`${GetColorOfTheLogoByTeam(teamInfo.name)}`} src={teamInfo.img} width={200} height={200} alt="" />
      ) : universe && universe !== "All" ? (
        <Image class={`${GetColorLogosByPublisher(universe)}`} src={publisherIMG(universe)} width={200} height={200} alt="" />
      ) : null
    }

    {
      team && team !== "All"
        ? team
        : universe && universe !== "All"
          ? universe
          : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10`}
    >
      {
        someCharacters.map((c: any) => {
          return (
            <div class="flex flex-col justify-center items-center gap-5 h-[30rem] w-[25rem]">
              <a
                href={`/${c.id}`}
                class="uppercase font-medium hover:underline"
              >
                {c.slug}
              </a>
              <div class="relative box characterId">
                <Image
                  class={`object-cover h-[25rem] w-[20rem] rounded-md`}
                  width={800}
                  height={800}
                  src={c.images.md}
                  loading="eager"
                  transition:name={`media-image-${c.id}`}
                  alt={c.name}
                />
              </div>
            </div>
          );
        })
      }
    </div>
    <Pagination
      currentPage={currentPage}
      countCharacters={characterdDisplayLenght}
      characterName={characterName}
      gender={gender}
      side={side}
      race={race}
      universe={universe}
      team={team}
      client:only
    />
  </main>
</Layout>
