---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionUniverses,
} from "../lib/mongodb";

import { AlignmentTranslator, getQueryOptions } from "../lib/charactersUtils";
import { CHARACTERS_PER_PAGE } from "../lib/constants/constants";

import Pagination from "../components/Pagination.svelte";
import FilterCharacters from "../components/FilterCharacters.svelte";
import Sheet from "src/components/Sheet.svelte";
import { Filter } from "lucide-astro";
import { type Sort } from "mongodb";
import HeroSection from "src/components/HeroSection.astro";
import NameAndImage from "src/components/characters_page/NameAndImage.astro";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";
// import navigate from 'astro:transitions/client';

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const power = Astro.url.searchParams.get("power") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

const sortBy = Astro.url.searchParams.get("sortBy") ?? "id";
const sortDirection = Astro.url.searchParams.get("sortDirection") ?? "desc";

const howManyPerPage = parseInt(
  Astro.url.searchParams.get("howManyPerPage") ??
    CHARACTERS_PER_PAGE.toString(),
);

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const universeForm = data.get("universe");
    const teamForm = data.get("team");

    return Astro.redirect(
      `/characters?characterName=${data.get("characterName")}&gender=${data.get("gender")}&side=${data.get("side")}&race=${data.get("race")}${universeForm ? `&universe=${universeForm}&team=${universeForm === universe ? teamForm : "All"}` : `&universe="All"&team="All"`}&currentPage=${1}`,
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const queryOptions: QueryOptions = getQueryOptions(
  characterName,
  side,
  universe,
  team,
  gender,
  race,
  power,
  characterOrFullName,
  includesOrExact,
);

const offset = (parseInt(currentPage) - 1) * howManyPerPage;

const characterdDisplayLenght =
  await collectionCharacters.countDocuments(queryOptions);

const someCharacters = await collectionCharacters
  .find({ ...queryOptions })
  .limit(howManyPerPage)
  .sort({ [`${sortBy}`]: sortDirection } as Sort)
  .skip(offset)
  .toArray();

const powerInfo = await collectionPowers.findOne({
  value: power !== "All" ? power : "",
});
const universeInfo = await collectionUniverses.findOne({
  value: universe !== "All" ? universe : "",
});
const teamInfo = universeInfo?.teams.find((t) => t.value === team); // i think this one is faster
// const teamInfo = await collectionTeams.findOne({ value: team }); // and this one slower (cause it calls the mongodb again)

const universesWithTeams = await collectionUniverses
  .find({ teams: { $exists: true, $not: { $size: 0 } } })
  .toArray();
---

<Layout
  title={team && team !== "All"
    ? team
    : universe && universe !== "All"
      ? universe
      : `Characters`}
>
  <main class="mb-32 flex flex-col justify-center items-center gap-5">
    <!-- <HeroSection /> -->

    <div class="flex justify-between items-center w-full">
      <div class="flex flex-col justify-center items-start gap-10">
        <!-- {
          team && team !== "All" && teamInfo ? (
            <NameAndImage img={teamInfo.img} name={team} />
          ) : universeInfo && universe !== "All" ? (
            <NameAndImage img={universeInfo.img} name={universe} />
          ) : (
            <p class="font-bold text-3xl">Characters</p>
          )
        }

        {
          side !== "All" && (
            <p class="font-bold text-3xl">{AlignmentTranslator(side)}</p>
          )
        }

        {
          power && power !== "All" && powerInfo && powerInfo.img && (
            <NameAndImage img={powerInfo.img} name={powerInfo.value} />
          )
        } -->
        <p class="font-bold text-3xl">Characters</p>
      </div>
      <div>
        <Sheet client:load ButtonClassName="">
          <Filter slot="trigger" />
          <div slot="content">
            <FilterCharacters
              characterOrFullName={characterOrFullName}
              howManyPerPage={howManyPerPage}
              includesOrExact={includesOrExact}
              characterName={characterName}
              gender={gender}
              side={side}
              race={race}
              power={power}
              universe={universe}
              team={team}
              sortBy={sortBy}
              sortDirection={sortDirection}
              universesWithTeams={universesWithTeams}
              client:load
            />
          </div>
        </Sheet>
      </div>
    </div>

    {
      someCharacters.length < 1 ? (
        <p class="text-5xl w-full text-center">No characters found</p>
      ) : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10 w-full`}
    >
      {
        someCharacters.map((c) => {
          return (
            <a
              href={`character?id=${c.id}`}
              class="w-full h-full flex justify-center"
            >
              <CharacterCard c={c} />
            </a>
          );
        })
      }
    </div>

    {
      characterdDisplayLenght > howManyPerPage && (
        <Pagination
          currentPage={currentPage}
          countItems={characterdDisplayLenght}
          howManyPerPage={howManyPerPage}
          url={`/characters?characterName=${characterName ?? ""}&gender=${gender ?? "both"}&side=${side ?? "All"}&race=${race ?? "All"}&power=${power ?? "All"}&universe=${universe ?? "All"}&team=${team ?? "All"}&characterOrFullName=${characterOrFullName}&includesOrExact=${includesOrExact}&sortBy=${sortBy}&sortDirection=${sortDirection}&howManyPerPage=${howManyPerPage}&currentPage=`}
          client:only
        />
      )
    }
  </main>
</Layout>
