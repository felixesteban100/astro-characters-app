---
import Layout from "../layouts/Layout.astro";
import "@/styles/globals.css";
import { collectionCharacters } from "../lib/mongodb";
import { Input } from "../components/ui/input";
import { Label } from "../components/ui/label";
import { Button } from "../components/ui/button";

import Image from "astro/components/Image.astro";
import { SearchIcon } from "lucide-react";

import SheetFilterCharacters from "../components/custom-ui/SheetFilterCharacters";
import SelectFilterCharacters from "../components/custom-ui/SelectFilterCharacters";

import {
  ALLALIGMENTS,
  ALLGENDERS,
  ALLRACES,
  ALLUNIVERSE,
  getTeamByUniverse,
} from "../lib/constants";
import { publisherIMG, getQueryOptions } from "@/lib/charactersUtils";

import PaginationCharacters from "../components/PaginationCharacters.astro";

import { atom } from 'nanostores';

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const characterName = data.get("characterName");
    const gender = data.get("gender");
    const side = data.get("side");
    const race = data.get("race");
    const universe = data.get("universe");
    let team = data.get("team");

    if(!getTeamByUniverse(universe?.toString() ?? "").find(c => c.name === team)){
      team = "All"
    }

    return Astro.redirect(
      `/characters?characterName=${characterName}&gender=${gender}&side=${side}&race=${race}${universe ? `&universe=${universe}&team=${(team)}` : `&universe="All"&team="All"`}&currentPage=${1}`
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName");
// const characterName = "hulk, batman, spider-man, wolverine, flash ii, captain marvel, ironman, wonder woman, superman";
const side = Astro.url.searchParams.get("side");
let universe = Astro.url.searchParams.get("universe");
const team = Astro.url.searchParams.get("team");
const gender = Astro.url.searchParams.get("gender");
const race = Astro.url.searchParams.get("race");
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

const queryOptions: QueryOptions = getQueryOptions(
  characterName,
  side,
  universe,
  team,
  gender,
  race,
  characterOrFullName,
  includesOrExact
);

const CHARACTERS_PER_PAGE = 8;

const offset = (parseInt(currentPage) - 1) * CHARACTERS_PER_PAGE;

const characterdDisplayLenght =
  await collectionCharacters.countDocuments(queryOptions);
const totalPages = Math.ceil(characterdDisplayLenght / CHARACTERS_PER_PAGE);

const someCharacters = await collectionCharacters
  .find({ ...queryOptions })
  .limit(CHARACTERS_PER_PAGE)
  .sort({ id: "desc" })
  .skip(offset)
  .toArray();

const teamByUniverse: { name: string; value: string; img: string }[] =
  getTeamByUniverse(universe ?? "");

const teamInfo = teamByUniverse.find((t) => t.value === team);

const universeState = atom(universe);

// if(universeState.value !== "All" && team !== "All"){
//   return Astro.redirect(
//       `/characters?characterName=${characterName}&gender=${gender}&side=${side}&race=${race}${`&universe=${universe}&team=${"All"}`}&currentPage=${1}`
//     );
// }
---

<!-- <script>
  import { isOpen } from '../store.js';

  // Set the store to true when the button is clicked
  function openDialog() {
    isOpen.set(true);
  }

  // Add an event listener to the button
  document.getElementById('openDialog').addEventListener('click', openDialog);
</script> -->

<Layout
  title={team && team !== "All"
    ? team
    : universe && universe !== "All"
      ? universe
      : `Characters`}
>
  <main class="mb-32 flex flex-col justify-center items-center gap-5 ">
    <div class="self-end">
      <SheetFilterCharacters client:visible>
        <h1 class="font-bold tet-5xl text-primary">Filters</h1>
        <form method="POST">
          <div class="w-full mb-10 flex flex-col gap-5 mt-10">
            <Label className="flex flex-col gap-5">
              CharacterName/s:
              <Input
                type="text"
                name="characterName"
                defaultValue={characterName ?? ""}
              />
            </Label>

            <SelectFilterCharacters
              options={ALLGENDERS}
              placeholder="Gender"
              defaultValue={gender ?? "both"}
              paramName="gender"
              client:load
            />

            <SelectFilterCharacters
              options={ALLALIGMENTS}
              placeholder="Aligment"
              defaultValue={side ?? "All"}
              paramName="side"
              client:load
            />

            <SelectFilterCharacters
              options={ALLRACES}
              placeholder="Race"
              defaultValue={race ?? "All"}
              paramName="race"
              client:load
            />

            <SelectFilterCharacters
              options={ALLUNIVERSE}
              placeholder="Universe"
              defaultValue={universeState.value ?? "All"}
              paramName="universe"
              onChange={universeState.set}
              client:load
            />

            {
              teamByUniverse.length > 0 && (
                <SelectFilterCharacters
                  options={teamByUniverse}
                  placeholder="Teams"
                  defaultValue={team ?? "All"}
                  paramName="team"
                  client:load
                />
              )
            }
          </div>
          <Button  className="flex justify-center gap-2 items-center"><SearchIcon /> Filter</Button>
        </form>
      </SheetFilterCharacters>
    </div>

    {
      team && team !== "All" && teamInfo !== undefined ? (
        <Image src={teamInfo.img} width={200} height={200} alt="" />
      ) : universe && universe !== "All" ? (
        <Image src={publisherIMG(universe)} width={200} height={200} alt="" />
      ) : null
    }

    {
      team && team !== "All"
        ? team
        : universe && universe !== "All"
          ? universe
          : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10`}
    >
      {
        someCharacters.map((c: any) => {
          return (
            <div class="flex flex-col justify-center items-center gap-5 h-[30rem] w-[25rem]">
              <a
                href={`/${c.id}`}
                class="uppercase font-medium hover:underline"
              >
                {c.slug}
              </a>
              <div class="relative box characterId">
                <Image
                  hover:blur-md
                  transition-all
                  class={`object-cover h-[25rem] w-[20rem] rounded-md`}
                  width={800}
                  height={800}
                  src={c.images.md}
                  loading="eager"
                  transition:name={`media-image-${c.id}`}
                  alt={c.name}
                />
              </div>
            </div>
          );
        })
      }
    </div>

    <PaginationCharacters
      currentPage={currentPage}
      totalPages={totalPages}
      characterName={characterName}
      gender={gender}
      side={side}
      race={race}
      universe={universe}
      team={team}
    />
  </main>
</Layout>
