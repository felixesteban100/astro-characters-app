---
import Layout from "../layouts/Layout.astro";
import "../styles/globals.css";
import {
  collectionCharacters,
  collectionPowers,
  collectionTeams,
  collectionUniverses,
} from "../lib/mongodb";

import {
  joinTeam_universe_power_toCharacter,
  getQueryOptions,
  AlignmentTranslator,
} from "../lib/charactersUtils";
import { CHARACTERS_PER_PAGE } from "../lib/constants/constants";

import Pagination from "../components/Pagination.svelte";
import FilterCharacters from "../components/FilterCharacters.svelte";
import CharacterCard from "src/components/characters_page/CharacterCard.astro";
import { Filter } from "lucide-astro";
import LoaderAstro from "src/components/LoaderAstro.astro";
import PowerCard from "src/components/powers_page/PowerCard.astro";
import UniverseCard from "src/components/universe_page/UniverseCard.astro";
import TeamCard from "src/components/team_page/TeamCard.astro";
import { getTeamAggregationOptions } from "$lib/constants/aggregations";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
const nameField = Astro.url.searchParams.get("nameField") ?? "name";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const power = Astro.url.searchParams.get("power") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

const sortBy = Astro.url.searchParams.get("sortBy") ?? "id";
const sortDirection = Astro.url.searchParams.get("sortDirection") ?? "desc";

const howManyPerPage = parseInt(
  Astro.url.searchParams.get("howManyPerPage") ??
    CHARACTERS_PER_PAGE.toString(),
);

const valuesFilter = {
  side,
  universe,
  team,
  gender,
  race,
  power,
};

const queryOptions: QueryOptions = getQueryOptions({
  ...valuesFilter,
  characterName,
  nameField,
  includesOrExact,
});

const offset = (parseInt(currentPage) - 1) * howManyPerPage;

const charactersName =
  characterName.split(",").length < 0 ? [] : characterName.split(",");

const [
  characterdDisplayLenght,
  characterJoinTeamAndUniverse,
  universesWithTeams,
  allUniverses,
  allPowers,
  [teamSelected],
] = await Promise.all([
  collectionCharacters
    .aggregate<CharacterWithJoinTeamUniversePower>(
      joinTeam_universe_power_toCharacter(
        queryOptions,
        sortBy,
        sortDirection,
        0,
        1000,
        [],
      ),
    )
    .toArray(),
  collectionCharacters
    .aggregate<CharacterWithJoinTeamUniversePower>(
      joinTeam_universe_power_toCharacter(
        queryOptions,
        sortBy,
        sortDirection,
        offset,
        howManyPerPage,
        charactersName,
      ),
    )
    .toArray(),
  collectionUniverses
    .aggregate<UniverseWithJoinTeams>([
      {
        $lookup: {
          from: "teams",
          localField: "id",
          foreignField: "universe",
          pipeline: [
            {
              $project: {
                universe: 0,
                comics: 0,
              },
            },
            { $sort: { name: 1 } },
          ],
          as: "teams",
        },
      },
      { $match: { teams: { $exists: true, $not: { $size: 0 } } } },
    ])
    .toArray(),
  collectionUniverses.find({}).sort({ id: 1 }).toArray(),
  collectionPowers.find({}).sort({ name: 1 }).toArray(),
  collectionTeams
    .aggregate<TeamWithJoinCharacterUniverse>([
      ...getTeamAggregationOptions(undefined),
      {
        $match: {
          name: team,
        },
      },
      { $unwind: "$universe" },
      { $sort: { [`_id`]: -1 } },
      { $skip: offset },
      { $limit: CHARACTERS_PER_PAGE },
    ])
    .toArray(),
]);

const attritutesFilteredArr = Object.entries({
  ...valuesFilter,
  side: AlignmentTranslator(valuesFilter.side),
}).filter(([key, value]) => value !== "All" && value !== "both");

function getTitle(): string {
  return attritutesFilteredArr.length > 0
    ? attritutesFilteredArr.reduce((acc, [key, value], index) => {
        if (index > 0) {
          if (key) acc = acc + " | " + value.toString();
        } else {
          acc = value.toString();
        }
        return acc;
      }, "")
    : "Characters";
}

const [universeSelected] = universesWithTeams.filter(
  (c) => c.value === universe,
);

const [powerSelected] =
  allPowers && power ? allPowers.filter((c) => c.value === power) : [undefined];
---

<script>
  document.addEventListener("keydown", (e) => {
    if (e.key === "t") {
      const buttonSheetTrigger = document.getElementById("filterCharacters");
      buttonSheetTrigger?.click();
    }
  });
</script>

<Layout title={getTitle()} showTitle={false}>
  <FilterCharacters
    characterName={characterName}
    nameField={nameField}
    howManyPerPage={howManyPerPage}
    includesOrExact={includesOrExact}
    gender={gender}
    side={side}
    race={race}
    power={power}
    universe={universe}
    team={team}
    sortBy={sortBy}
    sortDirection={sortDirection}
    universesWithTeams={universesWithTeams}
    allUniverses={allUniverses}
    allPowers={allPowers}
    client:load
    slot="page_title_other_content"
  >
    <div class="flex gap-5" slot="trigger">
      <Filter />
      <span class="text-primary hidden lg:flex">|</span>
      <span class="text-primary hidden lg:flex">(Press T)</span>
    </div>
  </FilterCharacters>

  <main slot="content">
    <div>
      {
        attritutesFilteredArr.length > 0 ? (
          <div class="flex flex-col md:flex-row justify-start items-center gap-5">
            {universeSelected && (
              <UniverseCard universe={universeSelected} unableLink={true} />
            )}
            {teamSelected && <TeamCard team={teamSelected} unableLink={true} />}
            {powerSelected && (
              <PowerCard power={powerSelected} unableLink={true} />
            )}
          </div>
        ) : null
      }
    </div>

    <div class="mb-32 flex flex-col justify-center items-center gap-5 mt-10">
      <!-- <HeroSection /> -->

      {
        characterJoinTeamAndUniverse.length < 1 ? (
          <p class="text-5xl w-full text-center">No characters found</p>
        ) : null
      }

      <div
        class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-y-16 gap-10 w-full`}
      >
        {
          characterJoinTeamAndUniverse.map((c) => {
            return (
              <CharacterCard
                c={c}
                withTransitionName={false}
                withLink={true}
                otherClasses="w-full h-full flex justify-center character-image"
              />
            );
          })
        }
      </div>

      {
        characterdDisplayLenght.length > howManyPerPage && (
          <div>
            <LoaderAstro />
            <div id="actionDoer">
              <Pagination
                currentPage={currentPage}
                countItems={characterdDisplayLenght.length}
                howManyPerPage={howManyPerPage}
                url={`/characters?characterName=${characterName ?? ""}&gender=${gender ?? "both"}&side=${side ?? "All"}&race=${race ?? "All"}&power=${power ?? "All"}&universe=${universe ?? "All"}&team=${team ?? "All"}&nameField=${nameField}&includesOrExact=${includesOrExact}&sortBy=${sortBy}&sortDirection=${sortDirection}&howManyPerPage=${howManyPerPage}&currentPage=`}
                client:only
              />
            </div>
          </div>
        )
      }
    </div>
  </main>
</Layout>
