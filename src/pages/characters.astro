---
import Layout from "../layouts/Layout.astro";
import "@/styles/globals.css";
import { collectionCharacters } from "../lib/mongodb";
import { Button } from "../components/ui/button";

import Image from "astro/components/Image.astro";
import { SearchIcon } from "lucide-react";

import SheetFilterCharacters from "../components/custom-ui/SheetFilterCharacters";

import {
  ALLALIGMENTS,
  ALLGENDERS,
  ALLRACES,
  ALLUNIVERSE,
  getTeamByUniverse,
} from "../lib/constants";
import { publisherIMG, getQueryOptions } from "@/lib/charactersUtils";

import PaginationCharacters from "../components/PaginationCharacters.astro";

import FilterForm from "../components/custom-ui/FilterForm";
// import FilterCharacters from "../components/custom-ui/FilterCharacters";
// import FormSvelte from "../components/custom-ui/FormSvelte.svelte";
import SelectFilterCharacters from "@/components/custom-ui/SelectFilterCharacters";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";

const currentPage = Astro.url.searchParams.get("currentPage") ?? "1";
const characterName = Astro.url.searchParams.get("characterName") ?? "";
// const characterName = "hulk, batman, spider-man, wolverine, flash ii, captain marvel, ironman, wonder woman, superman";
const side = Astro.url.searchParams.get("side") ?? "All";
const universe = Astro.url.searchParams.get("universe") ?? "All";
const team = Astro.url.searchParams.get("team") ?? "All";
const gender = Astro.url.searchParams.get("gender") ?? "both";
const race = Astro.url.searchParams.get("race") ?? "All";
const characterOrFullName =
  Astro.url.searchParams.get("characterOrFullName") === "true";
const includesOrExact =
  Astro.url.searchParams.get("includesOrExact") === "true";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const characterNameForm = data.get("characterName");
    const genderForm = data.get("gender");
    const sideForm = data.get("side");
    const raceForm = data.get("race");
    const universeForm = data.get("universe");
    const teamForm = data.get("team");

    return Astro.redirect(
      `/characters?characterName=${characterNameForm}&gender=${genderForm}&side=${sideForm}&race=${raceForm}${universeForm ? `&universe=${universeForm}&team=${universeForm === universe ? teamForm : "All"}` : `&universe="All"&team="All"`}&currentPage=${1}`
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}


const queryOptions: QueryOptions = getQueryOptions(
  characterName,
  side,
  universe,
  team,
  gender,
  race,
  characterOrFullName,
  includesOrExact
);

const CHARACTERS_PER_PAGE = 8;

const offset = (parseInt(currentPage) - 1) * CHARACTERS_PER_PAGE;

const characterdDisplayLenght =
  await collectionCharacters.countDocuments(queryOptions);
const totalPages = Math.ceil(characterdDisplayLenght / CHARACTERS_PER_PAGE);

const someCharacters = await collectionCharacters
  .find({ ...queryOptions })
  .limit(CHARACTERS_PER_PAGE)
  .sort({ id: "desc" })
  .skip(offset)
  .toArray();

const teamsByUniverse: { name: string; value: string; img: string }[] = getTeamByUniverse(universe ?? "")

const teamInfo = getTeamByUniverse(universe ?? "").find(
  (t) => t.value === team
);

---

<Layout
  title={team && team !== "All"
    ? team
    : universe && universe !== "All"
      ? universe
      : `Characters`}
>
  <main class="mb-32 flex flex-col justify-center items-center gap-5">
    <div class="self-end">
      <SheetFilterCharacters client:load>
        <h1 class="font-bold tet-5xl text-primary">Filters</h1>
        <form method="POST">
          <!-- <FilterForm
            characterName={characterName ?? ""}
            gender={gender}
            side={side}
            race={race}
            universe={universe}
            team={team}
            client:load
          /> -->
          <div class="w-full mb-10 flex flex-col gap-5 mt-10">
            <Label className="flex flex-col gap-5">
              CharacterName/s:
              <Input
                type="text"
                name="characterName"
                defaultValue={characterName}
              />
            </Label>

            <SelectFilterCharacters
              options={ALLGENDERS}
              placeholder="Gender"
              defaultValue={gender}
              paramName="gender"
              client:load
            />

            <SelectFilterCharacters
              options={ALLALIGMENTS}
              placeholder="Aligment"
              defaultValue={side}
              paramName="side"
              client:load
            />

            <SelectFilterCharacters
              options={ALLRACES}
              placeholder="Race"
              defaultValue={race}
              paramName="race"
              client:load
            />

            <SelectFilterCharacters
              options={ALLUNIVERSE}
              placeholder="Universe"
              defaultValue={universe}
              paramName="universe"
              client:load
            />

            {
              (teamsByUniverse.length > 0) && (
                <SelectFilterCharacters
                  options={teamsByUniverse}
                  placeholder="Teams"
                  defaultValue={team}
                  paramName="team"
                  client:load
                />
              )
            }
          </div>

          <Button className="flex justify-center gap-2 items-center w-full text-2xl"><SearchIcon /> Filter</Button>
        </form>
        <!-- <FilterCharacters
          characterName={characterName ?? ""}
          gender={gender}
          side={side}
          race={race}
          universe={universe}
          team={team}
          client:load
        /> -->
        <!-- <FormSvelte client:load /> -->
      </SheetFilterCharacters>
    </div>

    {
      team && team !== "All" && teamInfo !== undefined ? (
        <Image src={teamInfo.img} width={200} height={200} alt="" />
      ) : universe && universe !== "All" ? (
        <Image src={publisherIMG(universe)} width={200} height={200} alt="" />
      ) : null
    }

    {
      team && team !== "All"
        ? team
        : universe && universe !== "All"
          ? universe
          : null
    }

    <div
      class={`grid 2xl:grid-cols-4 xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-10`}
    >
      {
        someCharacters.map((c: any) => {
          return (
            <div class="flex flex-col justify-center items-center gap-5 h-[30rem] w-[25rem]">
              <a
                href={`/${c.id}`}
                class="uppercase font-medium hover:underline"
              >
                {c.slug}
              </a>
              <div class="relative box characterId">
                <Image
                  hover:blur-md
                  transition-all
                  class={`object-cover h-[25rem] w-[20rem] rounded-md`}
                  width={800}
                  height={800}
                  src={c.images.md}
                  loading="eager"
                  transition:name={`media-image-${c.id}`}
                  alt={c.name}
                />
              </div>
            </div>
          );
        })
      }
    </div>

    <PaginationCharacters
      currentPage={currentPage}
      totalPages={totalPages}
      characterName={characterName}
      gender={gender}
      side={side}
      race={race}
      universe={universe}
      team={team}
    />
  </main>
</Layout>
