---
import { Button } from "$lib/components/ui/button";
import {
  Axe,
  Brain,
  ChevronsUp,
  Percent,
  Shield,
  Sword,
  Zap,
} from "lucide-astro";
import StatsNumber from "./stats/StatsNumber.svelte";
import CharacterCard from "./characters_page/CharacterCard.astro";
import ChangeCharacterInfoBattle from "./ChangeCharacterInfoBattle.svelte";
import { collectionCharacters } from "$lib/mongodb";

interface Props {
  selectedCharacter: CharacterWithJoinTeamUniversePower;
  classNames?: string;
  position: string;
  otherCharacterId: number;
  showButtons?: boolean;
  showStats?: boolean;
}

const {
  selectedCharacter,
  position,
  otherCharacterId,
  showButtons = true,
  showStats = true,
} = Astro.props;

const allCharacters_Id_Name = await collectionCharacters
  .find({}, { projection: { id: 1, name: 1 } })
  .toArray();
---

<div class="w-full h-full flex flex-col justify-start items-center">
  <!-- id={`photo-${selectedCharacter.id}`} -->
  <div>
    <a
      href={`/character?id=${selectedCharacter.id}`}
      transition:name={`photo-${selectedCharacter.id}`}
    >
      <!-- class="character-image"
      id={`photo-${selectedCharacter.id}`} -->
      <!--  -->

      <CharacterCard
        imageSizes={"h-[20rem] md:h-[40rem] w-[40rem]"}
        c={selectedCharacter}
      />
    </a>
    {
      showButtons && (
        <div class="flex justify-between w-full mt-5">
          <a
            class="hidden lg:block"
            href={`/compare?${"first"}=${selectedCharacter.id}`}
            transition:name={`reuse-${selectedCharacter.id}`}
          >
            <Button variant={"outline"} class={"mb-2"}>
              Reuse {selectedCharacter.name}
            </Button>
          </a>

          <div transition:name={`change-${selectedCharacter.id}`}>
            <ChangeCharacterInfoBattle
              selectedCharacter={selectedCharacter}
              position={position}
              otherCharacterId={otherCharacterId}
              allCharacters_Id_Name={allCharacters_Id_Name}
              client:load
            />
          </div>
        </div>
      )
    }
  </div>

  {
    showStats && (
      <div
        transition:name={`stats-${selectedCharacter.id}`}
        class="w-[80%] flex flex-col gap-5 mt-10"
      >
        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="Combat"
          statValue={selectedCharacter.powerstats.combat}
        >
          <Sword slot="icon" />
        </StatsNumber>

        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="durability"
          statValue={selectedCharacter.powerstats.durability}
        >
          <Shield slot="icon" />
        </StatsNumber>

        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="intelligence"
          statValue={selectedCharacter.powerstats.intelligence}
        >
          <Brain slot="icon" />
        </StatsNumber>

        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="Intelligence"
          statValue={selectedCharacter.powerstats.intelligence}
        >
          <Zap slot="icon" />
        </StatsNumber>

        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="Speed"
          statValue={selectedCharacter.powerstats.speed}
        >
          <ChevronsUp slot="icon" />
        </StatsNumber>

        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="Strength"
          statValue={selectedCharacter.powerstats.strength}
        >
          <Axe slot="icon" />
        </StatsNumber>

        <StatsNumber
          client:load
          showNameAtAll={false}
          statName="Total"
          statValue={selectedCharacter.powerstats.total}
        >
          <Percent slot="icon" />
        </StatsNumber>

        <ul class="mx-auto">
          {selectedCharacter.powers.map((power) => (
            <li>{power.name}</li>
          ))}
        </ul>
      </div>
    )
  }
</div>

<!-- <div
  class={`flex-shrink flex flex-col justify-center items-center mb-10 ${classNames} `}
>
  <div class="flex flex-col gap-5 w-full items-center justify-center">
    <div class="flex justify-end items-center flex-col lg:flex-row w-full">
      <a class="hidden lg:block" href={`/compare?first=${selectedCharacter.id}`}>
        Reuse
      </a>
    </div>
    <div
      class="relative box characterId overflow-hidden character-image"
      id={`photo-${selectedCharacter.id}`}
    >
      <ImageCharacter
        width={500}
        height={500}
        classes={`card-shine-effect rounded-md w-[10rem] h-[15rem] md:w-[35rem] md:h-[35rem] lg:w-[45rem] lg:h-[45rem] object-cover object-top`}
        src={selectedCharacter.images.md}
        alt={selectedCharacter.name}
        loading="eager"
        id={selectedCharacter.id}
      />
    </div>
  </div>
  <div class="w-[80%] flex flex-col gap-10 mt-10">
    <a href={`/character?id=${selectedCharacter.id}`}>
      <Button variant={"link"} class="m-0 p-0">
        <p class="text-sm md:text-2xl text-ellipsis">
          <span class="text-primary">{selectedCharacter.id}</span>
          |
          <span class="text-foreground">{selectedCharacter.name}</span>
        </p>
      </Button>
    </a>
    <StatsNumber
      client:load
      showNameAtAll={false}
      statName="Total"
      statValue={selectedCharacter.powerstats.total}
    >
      <Percent slot="icon" />
    </StatsNumber>
    <Powers client:load powers={selectedCharacter.powers} />
  </div>
</div> -->
